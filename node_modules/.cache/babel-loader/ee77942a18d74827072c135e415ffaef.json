{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst indicative_utils_1 = require(\"indicative-utils\");\n\nconst under_1 = require(\"../../raw/under\");\n\nconst MISSING_VALUE = 'under:make sure to define max value';\nconst INVALID_TYPE = 'under:max value must be defined as an integer';\n/**\n * Enforces the field value to be under the defined value.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   age: 'integer|under:60'\n * }\n *\n * // or\n * const rules = {\n *   age: [\n *     validations.integer(),\n *     validations.under(60)\n *   ]\n * }\n * ```\n */\n\nconst validation = {\n  async: false,\n\n  compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n    const minValue = indicative_utils_1.cast(args[0], 'float', INVALID_TYPE);\n    return [minValue];\n  },\n\n  validate: (data, field, [maxValue], config) => {\n    let fieldValue = indicative_utils_1.getValue(data, field);\n    return indicative_utils_1.skippable(fieldValue, field, config) || under_1.under(fieldValue, maxValue);\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-rules/build/src/validations/number/under.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","under_1","MISSING_VALUE","INVALID_TYPE","validation","async","compile","args","ensureLength","minValue","cast","validate","data","field","maxValue","config","fieldValue","getValue","skippable","under","default"],"mappings":"AAAA;AACA;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAME,aAAa,GAAG,qCAAtB;AACA,MAAMC,YAAY,GAAG,+CAArB;AACA;;;;;;;;;;;;;;;;;;;;AAmBA,MAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;;AAEfC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACVR,IAAAA,kBAAkB,CAACS,YAAnB,CAAgCD,IAAhC,EAAsCL,aAAtC,EAAqD,CAArD;AACA,UAAMO,QAAQ,GAAGV,kBAAkB,CAACW,IAAnB,CAAwBH,IAAI,CAAC,CAAD,CAA5B,EAAiC,OAAjC,EAA0CJ,YAA1C,CAAjB;AACA,WAAO,CAACM,QAAD,CAAP;AACH,GANc;;AAOfE,EAAAA,QAAQ,EAAE,CAACC,IAAD,EAAOC,KAAP,EAAc,CAACC,QAAD,CAAd,EAA0BC,MAA1B,KAAqC;AAC3C,QAAIC,UAAU,GAAGjB,kBAAkB,CAACkB,QAAnB,CAA4BL,IAA5B,EAAkCC,KAAlC,CAAjB;AACA,WAAOd,kBAAkB,CAACmB,SAAnB,CAA6BF,UAA7B,EAAyCH,KAAzC,EAAgDE,MAAhD,KAA2Dd,OAAO,CAACkB,KAAR,CAAcH,UAAd,EAA0BF,QAA1B,CAAlE;AACH;AAVc,CAAnB;AAYAjB,OAAO,CAACuB,OAAR,GAAkBhB,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst under_1 = require(\"../../raw/under\");\nconst MISSING_VALUE = 'under:make sure to define max value';\nconst INVALID_TYPE = 'under:max value must be defined as an integer';\n/**\n * Enforces the field value to be under the defined value.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   age: 'integer|under:60'\n * }\n *\n * // or\n * const rules = {\n *   age: [\n *     validations.integer(),\n *     validations.under(60)\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n        const minValue = indicative_utils_1.cast(args[0], 'float', INVALID_TYPE);\n        return [minValue];\n    },\n    validate: (data, field, [maxValue], config) => {\n        let fieldValue = indicative_utils_1.getValue(data, field);\n        return indicative_utils_1.skippable(fieldValue, field, config) || under_1.under(fieldValue, maxValue);\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}