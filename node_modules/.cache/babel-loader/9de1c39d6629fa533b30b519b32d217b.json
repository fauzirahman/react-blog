{"ast":null,"code":"\"use strict\";\n/*\n * indicative-parser\n *\n * (c) Harminder Virk <virk@adonisjs.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst getBaseRules_1 = require(\"./getBaseRules\");\n\nfunction getLiteralType(type, rules, isOptional) {\n  return {\n    rules: rules,\n\n    getTree() {\n      return {\n        type: 'literal',\n        rules: getBaseRules_1.getBaseRules(type, isOptional).concat(rules || [])\n      };\n    }\n\n  };\n}\n\nexports.getLiteralType = getLiteralType;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-parser/build/src/utils/getLiteralType.js"],"names":["Object","defineProperty","exports","value","getBaseRules_1","require","getLiteralType","type","rules","isOptional","getTree","getBaseRules","concat"],"mappings":"AAAA;AACA;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,cAAc,GAAGC,OAAO,CAAC,gBAAD,CAA9B;;AACA,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,KAA9B,EAAqCC,UAArC,EAAiD;AAC7C,SAAO;AACHD,IAAAA,KAAK,EAAEA,KADJ;;AAEHE,IAAAA,OAAO,GAAG;AACN,aAAO;AACHH,QAAAA,IAAI,EAAE,SADH;AAEHC,QAAAA,KAAK,EAAEJ,cAAc,CAACO,YAAf,CAA4BJ,IAA5B,EAAkCE,UAAlC,EAA8CG,MAA9C,CAAqDJ,KAAK,IAAI,EAA9D;AAFJ,OAAP;AAIH;;AAPE,GAAP;AASH;;AACDN,OAAO,CAACI,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\n/*\n * indicative-parser\n *\n * (c) Harminder Virk <virk@adonisjs.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst getBaseRules_1 = require(\"./getBaseRules\");\nfunction getLiteralType(type, rules, isOptional) {\n    return {\n        rules: rules,\n        getTree() {\n            return {\n                type: 'literal',\n                rules: getBaseRules_1.getBaseRules(type, isOptional).concat(rules || []),\n            };\n        },\n    };\n}\nexports.getLiteralType = getLiteralType;\n"]},"metadata":{},"sourceType":"script"}