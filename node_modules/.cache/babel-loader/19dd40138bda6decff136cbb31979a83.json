{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst indicative_utils_1 = require(\"indicative-utils\");\n\nconst empty_1 = require(\"../../raw/empty\");\n\nconst MISSING_VALUES = 'requiredWhen:make sure to define target field and it\\'s expected value';\n/**\n * Enforces the field value to exist when the target field value matches the given\n * value. For example: Ask for `address` when value for `checkout_type=deliver`.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   address: 'required_when:checkout_type,deliver'\n * }\n *\n * // or\n * const rules = {\n *   address: [\n *     validations.requiredWhen(['checkout_type', 'deliver'])\n *   ]\n * }\n * ```\n *\n * You can also define an array of values to match from. For example: Ask for\n * the `county` when `country=Uk or US`.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   state: [\n *     validations.requiredWhen(['country', ['UK', 'US']])\n *   ]\n * }\n * ```\n */\n\nconst validation = {\n  async: false,\n\n  compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUES, 2);\n    return [String(args[0]), args[1]];\n  },\n\n  validate: (data, field, [targetField, expectedValues]) => {\n    const targetFieldValue = indicative_utils_1.getValue(data, targetField);\n\n    if (empty_1.empty(targetFieldValue)) {\n      return true;\n    }\n    /**\n     * Ignore when expectedValues are array and none of the values matches\n     * the value of the targeted field.\n     */\n\n    /* eslint eqeqeq: \"off\" */\n\n\n    if (Array.isArray(expectedValues)) {\n      if (!expectedValues.find(value => targetFieldValue == value)) {\n        return true;\n      }\n    } else if (targetFieldValue != expectedValues) {\n      return true;\n    }\n\n    return !empty_1.empty(indicative_utils_1.getValue(data, field));\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-rules/build/src/validations/existence/requiredWhen.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","empty_1","MISSING_VALUES","validation","async","compile","args","ensureLength","String","validate","data","field","targetField","expectedValues","targetFieldValue","getValue","empty","Array","isArray","find","default"],"mappings":"AAAA;AACA;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAME,cAAc,GAAG,wEAAvB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,MAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;;AAEfC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACVP,IAAAA,kBAAkB,CAACQ,YAAnB,CAAgCD,IAAhC,EAAsCJ,cAAtC,EAAsD,CAAtD;AACA,WAAO,CAACM,MAAM,CAACF,IAAI,CAAC,CAAD,CAAL,CAAP,EAAkBA,IAAI,CAAC,CAAD,CAAtB,CAAP;AACH,GALc;;AAMfG,EAAAA,QAAQ,EAAE,CAACC,IAAD,EAAOC,KAAP,EAAc,CAACC,WAAD,EAAcC,cAAd,CAAd,KAAgD;AACtD,UAAMC,gBAAgB,GAAGf,kBAAkB,CAACgB,QAAnB,CAA4BL,IAA5B,EAAkCE,WAAlC,CAAzB;;AACA,QAAIX,OAAO,CAACe,KAAR,CAAcF,gBAAd,CAAJ,EAAqC;AACjC,aAAO,IAAP;AACH;AACD;;;;;AAIA;;;AACA,QAAIG,KAAK,CAACC,OAAN,CAAcL,cAAd,CAAJ,EAAmC;AAC/B,UAAI,CAACA,cAAc,CAACM,IAAf,CAAqBrB,KAAD,IAAWgB,gBAAgB,IAAIhB,KAAnD,CAAL,EAAgE;AAC5D,eAAO,IAAP;AACH;AACJ,KAJD,MAKK,IAAIgB,gBAAgB,IAAID,cAAxB,EAAwC;AACzC,aAAO,IAAP;AACH;;AACD,WAAO,CAACZ,OAAO,CAACe,KAAR,CAAcjB,kBAAkB,CAACgB,QAAnB,CAA4BL,IAA5B,EAAkCC,KAAlC,CAAd,CAAR;AACH;AAzBc,CAAnB;AA2BAd,OAAO,CAACuB,OAAR,GAAkBjB,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst empty_1 = require(\"../../raw/empty\");\nconst MISSING_VALUES = 'requiredWhen:make sure to define target field and it\\'s expected value';\n/**\n * Enforces the field value to exist when the target field value matches the given\n * value. For example: Ask for `address` when value for `checkout_type=deliver`.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   address: 'required_when:checkout_type,deliver'\n * }\n *\n * // or\n * const rules = {\n *   address: [\n *     validations.requiredWhen(['checkout_type', 'deliver'])\n *   ]\n * }\n * ```\n *\n * You can also define an array of values to match from. For example: Ask for\n * the `county` when `country=Uk or US`.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   state: [\n *     validations.requiredWhen(['country', ['UK', 'US']])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUES, 2);\n        return [String(args[0]), args[1]];\n    },\n    validate: (data, field, [targetField, expectedValues]) => {\n        const targetFieldValue = indicative_utils_1.getValue(data, targetField);\n        if (empty_1.empty(targetFieldValue)) {\n            return true;\n        }\n        /**\n         * Ignore when expectedValues are array and none of the values matches\n         * the value of the targeted field.\n         */\n        /* eslint eqeqeq: \"off\" */\n        if (Array.isArray(expectedValues)) {\n            if (!expectedValues.find((value) => targetFieldValue == value)) {\n                return true;\n            }\n        }\n        else if (targetFieldValue != expectedValues) {\n            return true;\n        }\n        return !empty_1.empty(indicative_utils_1.getValue(data, field));\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}