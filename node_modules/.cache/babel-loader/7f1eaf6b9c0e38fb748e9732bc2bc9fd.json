{"ast":null,"code":"\"use strict\";\n/**\n * @module compiler/sanitizer\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n* indicative-compiler\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nconst indicative_parser_1 = require(\"indicative-parser\");\n\nconst TreeWalker_1 = require(\"../TreeWalker\");\n\nconst ArrayWrapper_1 = require(\"./ArrayWrapper\");\n\nconst SanitizationsRunner_1 = require(\"./SanitizationsRunner\");\n/**\n * Compiles rules and messages schema to an array of top level\n * functions highly optimized for speed.\n */\n\n\nclass Compiler {\n  constructor(schema, sanitizations) {\n    this.sanitizations = sanitizations;\n    this.parsedSchema = indicative_parser_1.rulesParser(schema);\n  }\n  /**\n   * Compiles the schema to an array of functions\n   */\n\n\n  compile() {\n    return new TreeWalker_1.TreeWalker(\n    /**\n     * Consume each node inside the tree\n     */\n    (field, _, rules, dotPath) => {\n      return new SanitizationsRunner_1.SanitizationsRunner(field, dotPath, rules, this.sanitizations);\n    },\n    /**\n     * Wraps array children, since the length of array is unknown.\n     */\n    (index, field, children, dotPath) => {\n      return new ArrayWrapper_1.ArrayWrapper(field, index, children, dotPath);\n    }).walk(this.parsedSchema);\n  }\n\n}\n\nexports.Compiler = Compiler;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-compiler/build/src/Sanitizer/Compiler.js"],"names":["Object","defineProperty","exports","value","indicative_parser_1","require","TreeWalker_1","ArrayWrapper_1","SanitizationsRunner_1","Compiler","constructor","schema","sanitizations","parsedSchema","rulesParser","compile","TreeWalker","field","_","rules","dotPath","SanitizationsRunner","index","children","ArrayWrapper","walk"],"mappings":"AAAA;AACA;;;;AAGAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;;;;;AAQA,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,mBAAD,CAAnC;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,gBAAD,CAA9B;;AACA,MAAMG,qBAAqB,GAAGH,OAAO,CAAC,uBAAD,CAArC;AACA;;;;;;AAIA,MAAMI,QAAN,CAAe;AACXC,EAAAA,WAAW,CAACC,MAAD,EAASC,aAAT,EAAwB;AAC/B,SAAKA,aAAL,GAAqBA,aAArB;AACA,SAAKC,YAAL,GAAoBT,mBAAmB,CAACU,WAApB,CAAgCH,MAAhC,CAApB;AACH;AACD;;;;;AAGAI,EAAAA,OAAO,GAAG;AACN,WAAO,IAAIT,YAAY,CAACU,UAAjB;AACP;;;AAGA,KAACC,KAAD,EAAQC,CAAR,EAAWC,KAAX,EAAkBC,OAAlB,KAA8B;AAC1B,aAAO,IAAIZ,qBAAqB,CAACa,mBAA1B,CAA8CJ,KAA9C,EAAqDG,OAArD,EAA8DD,KAA9D,EAAqE,KAAKP,aAA1E,CAAP;AACH,KANM;AAOP;;;AAGA,KAACU,KAAD,EAAQL,KAAR,EAAeM,QAAf,EAAyBH,OAAzB,KAAqC;AACjC,aAAO,IAAIb,cAAc,CAACiB,YAAnB,CAAgCP,KAAhC,EAAuCK,KAAvC,EAA8CC,QAA9C,EAAwDH,OAAxD,CAAP;AACH,KAZM,EAYJK,IAZI,CAYC,KAAKZ,YAZN,CAAP;AAaH;;AAtBU;;AAwBfX,OAAO,CAACO,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\n/**\n * @module compiler/sanitizer\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n* indicative-compiler\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nconst indicative_parser_1 = require(\"indicative-parser\");\nconst TreeWalker_1 = require(\"../TreeWalker\");\nconst ArrayWrapper_1 = require(\"./ArrayWrapper\");\nconst SanitizationsRunner_1 = require(\"./SanitizationsRunner\");\n/**\n * Compiles rules and messages schema to an array of top level\n * functions highly optimized for speed.\n */\nclass Compiler {\n    constructor(schema, sanitizations) {\n        this.sanitizations = sanitizations;\n        this.parsedSchema = indicative_parser_1.rulesParser(schema);\n    }\n    /**\n     * Compiles the schema to an array of functions\n     */\n    compile() {\n        return new TreeWalker_1.TreeWalker(\n        /**\n         * Consume each node inside the tree\n         */\n        (field, _, rules, dotPath) => {\n            return new SanitizationsRunner_1.SanitizationsRunner(field, dotPath, rules, this.sanitizations);\n        }, \n        /**\n         * Wraps array children, since the length of array is unknown.\n         */\n        (index, field, children, dotPath) => {\n            return new ArrayWrapper_1.ArrayWrapper(field, index, children, dotPath);\n        }).walk(this.parsedSchema);\n    }\n}\nexports.Compiler = Compiler;\n"]},"metadata":{},"sourceType":"script"}