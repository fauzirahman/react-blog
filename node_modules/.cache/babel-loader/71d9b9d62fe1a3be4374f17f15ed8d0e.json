{"ast":null,"code":"\"use strict\";\n/**\n * @module indicative-rules\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst indicative_utils_1 = require(\"indicative-utils\");\n/**\n * Removes whitespace from both sides of a given string.\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   username: 'trim'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   username: [\n *     sanitizations.trim()\n *   ]\n * }\n * ```\n */\n\n\nconst trim = {\n  sanitize(data, field) {\n    let fieldValue = indicative_utils_1.getValue(data, field);\n\n    if (typeof fieldValue !== 'string') {\n      return;\n    }\n\n    indicative_utils_1.patchValue(data, field, fieldValue.trim());\n  }\n\n};\nexports.default = trim;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-rules/build/src/sanitizations/trim.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","trim","sanitize","data","field","fieldValue","getValue","patchValue","default"],"mappings":"AAAA;AACA;;;;AAGAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;AACA;;;;;;;;;;;;;;;;;;;;AAkBA,MAAMC,IAAI,GAAG;AACTC,EAAAA,QAAQ,CAACC,IAAD,EAAOC,KAAP,EAAc;AAClB,QAAIC,UAAU,GAAGN,kBAAkB,CAACO,QAAnB,CAA4BH,IAA5B,EAAkCC,KAAlC,CAAjB;;AACA,QAAI,OAAQC,UAAR,KAAwB,QAA5B,EAAsC;AAClC;AACH;;AACDN,IAAAA,kBAAkB,CAACQ,UAAnB,CAA8BJ,IAA9B,EAAoCC,KAApC,EAA2CC,UAAU,CAACJ,IAAX,EAA3C;AACH;;AAPQ,CAAb;AASAJ,OAAO,CAACW,OAAR,GAAkBP,IAAlB","sourcesContent":["\"use strict\";\n/**\n * @module indicative-rules\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\n/**\n * Removes whitespace from both sides of a given string.\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   username: 'trim'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   username: [\n *     sanitizations.trim()\n *   ]\n * }\n * ```\n */\nconst trim = {\n    sanitize(data, field) {\n        let fieldValue = indicative_utils_1.getValue(data, field);\n        if (typeof (fieldValue) !== 'string') {\n            return;\n        }\n        indicative_utils_1.patchValue(data, field, fieldValue.trim());\n    },\n};\nexports.default = trim;\n"]},"metadata":{},"sourceType":"script"}