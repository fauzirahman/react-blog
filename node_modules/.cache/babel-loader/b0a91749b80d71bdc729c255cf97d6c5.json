{"ast":null,"code":"import Axios from 'axios';\nimport { validateAll } from 'indicative';\nimport config from '../Config';\nexport default class AuthService {\n  async registerUser(data) {\n    const rules = {\n      name: 'required|string',\n      email: 'required|email',\n      password: 'required|string|min:6|confirmed'\n    };\n    const message = {\n      required: 'This field is required.',\n      'required.email': 'The email is required.',\n      'password.confirmed': 'The password confirmation does not match.'\n    };\n\n    try {\n      await validateAll(data, rules, message);\n\n      try {\n        const response = await Axios.post(`${config.apiUrl}/api/register`, {\n          name: data.name,\n          email: data.email,\n          password: data.password,\n          password_confirmation: data.password_confirmation\n        });\n        console.log(response);\n        return response.data;\n      } catch (errors) {\n        var Jsonemail = JSON.parse(errors.response.data);\n        const formattedErrors = {};\n        formattedErrors['email'] = Jsonemail['email'];\n        console.log(formattedErrors);\n        return formattedErrors;\n      }\n    } catch (errors) {\n      //show Errors\n      const formattedErrors = {};\n      errors.forEach(error => formattedErrors[error.field] = error.message);\n      console.log(formattedErrors);\n      return formattedErrors;\n    }\n  }\n\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/src/services/auth.js"],"names":["Axios","validateAll","config","AuthService","registerUser","data","rules","name","email","password","message","required","response","post","apiUrl","password_confirmation","console","log","errors","Jsonemail","JSON","parse","formattedErrors","forEach","error","field"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,eAAe,MAAMC,WAAN,CAAkB;AAE7B,QAAMC,YAAN,CAAmBC,IAAnB,EAAwB;AACpB,UAAMC,KAAK,GAAG;AACVC,MAAAA,IAAI,EAAE,iBADI;AAEVC,MAAAA,KAAK,EAAE,gBAFG;AAGVC,MAAAA,QAAQ,EAAE;AAHA,KAAd;AAOA,UAAMC,OAAO,GAAG;AACZC,MAAAA,QAAQ,EAAE,yBADE;AAEZ,wBAAkB,wBAFN;AAGZ,4BAAsB;AAHV,KAAhB;;AAMA,QAAI;AAEA,YAAMV,WAAW,CAACI,IAAD,EAAOC,KAAP,EAAcI,OAAd,CAAjB;;AAEA,UAAI;AACA,cAAME,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAN,CAAY,GAAEX,MAAM,CAACY,MAAO,eAA5B,EAA4C;AAC/DP,UAAAA,IAAI,EAAEF,IAAI,CAACE,IADoD;AAE/DC,UAAAA,KAAK,EAAEH,IAAI,CAACG,KAFmD;AAG/DC,UAAAA,QAAQ,EAAEJ,IAAI,CAACI,QAHgD;AAI/DM,UAAAA,qBAAqB,EAAEV,IAAI,CAACU;AAJmC,SAA5C,CAAvB;AAQAC,QAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACA,eAAOA,QAAQ,CAACP,IAAhB;AAEH,OAZD,CAYE,OAAOa,MAAP,EAAe;AACb,YAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACN,QAAP,CAAgBP,IAA3B,CAAhB;AAEA,cAAMiB,eAAe,GAAG,EAAxB;AACAA,QAAAA,eAAe,CAAC,OAAD,CAAf,GAA2BH,SAAS,CAAC,OAAD,CAApC;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAYK,eAAZ;AACA,eAAOA,eAAP;AACH;AAGJ,KA1BD,CA0BE,OAAOJ,MAAP,EAAe;AACb;AACA,YAAMI,eAAe,GAAG,EAAxB;AACAJ,MAAAA,MAAM,CAACK,OAAP,CAAeC,KAAK,IAAIF,eAAe,CAACE,KAAK,CAACC,KAAP,CAAf,GAA+BD,KAAK,CAACd,OAA7D;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYK,eAAZ;AACA,aAAOA,eAAP;AACH;AACJ;;AAjD4B","sourcesContent":["import Axios from 'axios';\nimport { validateAll } from 'indicative';\nimport config from '../Config';\n\nexport default class AuthService {\n    \n    async registerUser(data){        \n        const rules = {\n            name: 'required|string',\n            email: 'required|email',\n            password: 'required|string|min:6|confirmed'\n        };\n\n\n        const message = {\n            required: 'This field is required.',\n            'required.email': 'The email is required.',\n            'password.confirmed': 'The password confirmation does not match.'\n        };\n\n        try {\n\n            await validateAll(data, rules, message)\n\n            try {\n                const response = await Axios.post(`${config.apiUrl}/api/register`, {\n                    name: data.name,\n                    email: data.email,\n                    password: data.password,\n                    password_confirmation: data.password_confirmation\n                })\n\n\n                console.log(response);\n                return response.data;\n                \n            } catch (errors) {\n                var Jsonemail = JSON.parse(errors.response.data)\n\n                const formattedErrors = {}\n                formattedErrors['email'] = Jsonemail['email'];\n                console.log(formattedErrors);\n                return formattedErrors\n            }\n\n\n        } catch (errors) {\n            //show Errors\n            const formattedErrors = {}\n            errors.forEach(error => formattedErrors[error.field] = error.message)\n            console.log(formattedErrors);\n            return formattedErrors\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}