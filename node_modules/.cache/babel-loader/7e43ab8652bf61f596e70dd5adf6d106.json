{"ast":null,"code":"\"use strict\";\n/**\n * @module indicative-formatters\n */\n\nvar _classCallCheck = require(\"/opt/lampp/htdocs/react-blog/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/lampp/htdocs/react-blog/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Vanilla formatter is a plain formatter to collect validation\n * errors\n */\n\nvar JsonApiFormatter =\n/*#__PURE__*/\nfunction () {\n  function JsonApiFormatter() {\n    _classCallCheck(this, JsonApiFormatter);\n\n    this.errors = [];\n  }\n  /**\n   * Adds error to the list of existing errors\n   */\n\n\n  _createClass(JsonApiFormatter, [{\n    key: \"addError\",\n    value: function addError(error, field, rule, args) {\n      var message = '';\n      var validation = rule;\n\n      if (error instanceof Error) {\n        message = error.message;\n        validation = 'ENGINE_EXCEPTION';\n      } else {\n        message = error;\n      }\n\n      this.errors.push({\n        source: {\n          pointer: field\n        },\n        title: validation,\n        detail: message,\n        meta: {\n          args: args\n        }\n      });\n    }\n    /**\n     * Returns an array of errors or `null` when there are no\n     * errors\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.errors.length ? {\n        errors: this.errors\n      } : null;\n    }\n  }]);\n\n  return JsonApiFormatter;\n}();\n\nexports.JsonApiFormatter = JsonApiFormatter;","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-formatters/build/src/JsonApiFormatter.js"],"names":["Object","defineProperty","exports","value","JsonApiFormatter","errors","error","field","rule","args","message","validation","Error","push","source","pointer","title","detail","meta","length"],"mappings":"AAAA;AACA;;;;;;;;AAGAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;IAIMC,gB;;;AACF,8BAAc;AAAA;;AACV,SAAKC,MAAL,GAAc,EAAd;AACH;AACD;;;;;;;6BAGSC,K,EAAOC,K,EAAOC,I,EAAMC,I,EAAM;AAC/B,UAAIC,OAAO,GAAG,EAAd;AACA,UAAIC,UAAU,GAAGH,IAAjB;;AACA,UAAIF,KAAK,YAAYM,KAArB,EAA4B;AACxBF,QAAAA,OAAO,GAAGJ,KAAK,CAACI,OAAhB;AACAC,QAAAA,UAAU,GAAG,kBAAb;AACH,OAHD,MAIK;AACDD,QAAAA,OAAO,GAAGJ,KAAV;AACH;;AACD,WAAKD,MAAL,CAAYQ,IAAZ,CAAiB;AACbC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,OAAO,EAAER;AAAX,SADK;AAEbS,QAAAA,KAAK,EAAEL,UAFM;AAGbM,QAAAA,MAAM,EAAEP,OAHK;AAIbQ,QAAAA,IAAI,EAAE;AAAET,UAAAA,IAAI,EAAJA;AAAF;AAJO,OAAjB;AAMH;AACD;;;;;;;6BAIS;AACL,aAAO,KAAKJ,MAAL,CAAYc,MAAZ,GAAqB;AAAEd,QAAAA,MAAM,EAAE,KAAKA;AAAf,OAArB,GAA+C,IAAtD;AACH;;;;;;AAELH,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\n/**\n * @module indicative-formatters\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Vanilla formatter is a plain formatter to collect validation\n * errors\n */\nclass JsonApiFormatter {\n    constructor() {\n        this.errors = [];\n    }\n    /**\n     * Adds error to the list of existing errors\n     */\n    addError(error, field, rule, args) {\n        let message = '';\n        let validation = rule;\n        if (error instanceof Error) {\n            message = error.message;\n            validation = 'ENGINE_EXCEPTION';\n        }\n        else {\n            message = error;\n        }\n        this.errors.push({\n            source: { pointer: field },\n            title: validation,\n            detail: message,\n            meta: { args },\n        });\n    }\n    /**\n     * Returns an array of errors or `null` when there are no\n     * errors\n     */\n    toJSON() {\n        return this.errors.length ? { errors: this.errors } : null;\n    }\n}\nexports.JsonApiFormatter = JsonApiFormatter;\n"]},"metadata":{},"sourceType":"script"}