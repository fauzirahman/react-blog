{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nvar _slicedToArray = require(\"/opt/lampp/htdocs/blog-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar indicative_utils_1 = require(\"indicative-utils\");\n\nvar MISSING_VALUE = 'endsWith:make sure to define substring';\n/**\n * Enforces the value of field under validation ends with a certain `substring`.\n * This validation will also trim whitespaces before making the check.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   reg_no: 'ends_with:qaw'\n * }\n *\n * // or\n * const rules = {\n *   reg_no: [\n *     validations.endsWith(['qaw'])\n *   ]\n * }\n * ```\n */\n\nvar validation = {\n  async: false,\n  compile: function compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n    return [String(args[0])];\n  },\n  validate: function validate(data, field, _ref, config) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        substring = _ref2[0];\n\n    var fieldValue = indicative_utils_1.getValue(data, field);\n\n    if (indicative_utils_1.skippable(fieldValue, field, config)) {\n      return true;\n    }\n\n    if (typeof fieldValue !== 'string') {\n      return false;\n    }\n\n    return fieldValue.endsWith(substring);\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-rules/build/src/validations/string/endsWith.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","MISSING_VALUE","validation","async","compile","args","ensureLength","String","validate","data","field","config","substring","fieldValue","getValue","skippable","endsWith","default"],"mappings":"AAAA;AACA;;;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,IAAMC,aAAa,GAAG,wCAAtB;AACA;;;;;;;;;;;;;;;;;;;;AAmBA,IAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;AAEfC,EAAAA,OAFe,mBAEPC,IAFO,EAED;AACVN,IAAAA,kBAAkB,CAACO,YAAnB,CAAgCD,IAAhC,EAAsCJ,aAAtC,EAAqD,CAArD;AACA,WAAO,CAACM,MAAM,CAACF,IAAI,CAAC,CAAD,CAAL,CAAP,CAAP;AACH,GALc;AAMfG,EAAAA,QAAQ,EAAE,kBAACC,IAAD,EAAOC,KAAP,QAA2BC,MAA3B,EAAsC;AAAA;AAAA,QAAvBC,SAAuB;;AAC5C,QAAMC,UAAU,GAAGd,kBAAkB,CAACe,QAAnB,CAA4BL,IAA5B,EAAkCC,KAAlC,CAAnB;;AACA,QAAIX,kBAAkB,CAACgB,SAAnB,CAA6BF,UAA7B,EAAyCH,KAAzC,EAAgDC,MAAhD,CAAJ,EAA6D;AACzD,aAAO,IAAP;AACH;;AACD,QAAI,OAAQE,UAAR,KAAwB,QAA5B,EAAsC;AAClC,aAAO,KAAP;AACH;;AACD,WAAOA,UAAU,CAACG,QAAX,CAAoBJ,SAApB,CAAP;AACH;AAfc,CAAnB;AAiBAf,OAAO,CAACoB,OAAR,GAAkBf,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst MISSING_VALUE = 'endsWith:make sure to define substring';\n/**\n * Enforces the value of field under validation ends with a certain `substring`.\n * This validation will also trim whitespaces before making the check.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   reg_no: 'ends_with:qaw'\n * }\n *\n * // or\n * const rules = {\n *   reg_no: [\n *     validations.endsWith(['qaw'])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n        return [String(args[0])];\n    },\n    validate: (data, field, [substring], config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        if (indicative_utils_1.skippable(fieldValue, field, config)) {\n            return true;\n        }\n        if (typeof (fieldValue) !== 'string') {\n            return false;\n        }\n        return fieldValue.endsWith(substring);\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}