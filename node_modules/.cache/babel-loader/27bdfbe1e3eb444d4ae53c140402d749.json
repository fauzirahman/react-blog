{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst indicative_utils_1 = require(\"indicative-utils\");\n\nconst before_1 = require(\"../../raw/before\");\n\nconst MISSING_VALUE = 'before:make sure to define the before date';\nconst INVALID_TYPE = 'before:before date must be defined as string or date object';\n/**\n * Enforces the field value to be before the expected date.\n * This method uses [isBefore](https://date-fns.org/docs/isBefore) function of date-fns.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   confCall: 'date|before:2019-11-20'\n * }\n *\n * // or\n * const rules = {\n *   confCall: [\n *     validations.date(),\n *     validations.before(['2019-11-20'])\n *   ]\n * }\n * ```\n */\n\nconst validation = {\n  async: false,\n\n  compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n    const beforeDate = indicative_utils_1.cast(args[0], 'date', INVALID_TYPE);\n    return [beforeDate];\n  },\n\n  validate: (data, field, [beforeDate], config) => {\n    const fieldValue = indicative_utils_1.getValue(data, field);\n    return indicative_utils_1.skippable(fieldValue, field, config) || before_1.before(fieldValue, beforeDate);\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-rules/build/src/validations/date-string/before.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","before_1","MISSING_VALUE","INVALID_TYPE","validation","async","compile","args","ensureLength","beforeDate","cast","validate","data","field","config","fieldValue","getValue","skippable","before","default"],"mappings":"AAAA;AACA;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,kBAAD,CAAxB;;AACA,MAAME,aAAa,GAAG,4CAAtB;AACA,MAAMC,YAAY,GAAG,6DAArB;AACA;;;;;;;;;;;;;;;;;;;;;AAoBA,MAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;;AAEfC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACVR,IAAAA,kBAAkB,CAACS,YAAnB,CAAgCD,IAAhC,EAAsCL,aAAtC,EAAqD,CAArD;AACA,UAAMO,UAAU,GAAGV,kBAAkB,CAACW,IAAnB,CAAwBH,IAAI,CAAC,CAAD,CAA5B,EAAiC,MAAjC,EAAyCJ,YAAzC,CAAnB;AACA,WAAO,CAACM,UAAD,CAAP;AACH,GANc;;AAOfE,EAAAA,QAAQ,EAAE,CAACC,IAAD,EAAOC,KAAP,EAAc,CAACJ,UAAD,CAAd,EAA4BK,MAA5B,KAAuC;AAC7C,UAAMC,UAAU,GAAGhB,kBAAkB,CAACiB,QAAnB,CAA4BJ,IAA5B,EAAkCC,KAAlC,CAAnB;AACA,WAAOd,kBAAkB,CAACkB,SAAnB,CAA6BF,UAA7B,EAAyCF,KAAzC,EAAgDC,MAAhD,KAA2Db,QAAQ,CAACiB,MAAT,CAAgBH,UAAhB,EAA4BN,UAA5B,CAAlE;AACH;AAVc,CAAnB;AAYAZ,OAAO,CAACsB,OAAR,GAAkBf,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst before_1 = require(\"../../raw/before\");\nconst MISSING_VALUE = 'before:make sure to define the before date';\nconst INVALID_TYPE = 'before:before date must be defined as string or date object';\n/**\n * Enforces the field value to be before the expected date.\n * This method uses [isBefore](https://date-fns.org/docs/isBefore) function of date-fns.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   confCall: 'date|before:2019-11-20'\n * }\n *\n * // or\n * const rules = {\n *   confCall: [\n *     validations.date(),\n *     validations.before(['2019-11-20'])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n        const beforeDate = indicative_utils_1.cast(args[0], 'date', INVALID_TYPE);\n        return [beforeDate];\n    },\n    validate: (data, field, [beforeDate], config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        return indicative_utils_1.skippable(fieldValue, field, config) || before_1.before(fieldValue, beforeDate);\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}