{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst indicative_utils_1 = require(\"indicative-utils\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst beforeOffsetOf_1 = require(\"../../raw/beforeOffsetOf\");\n\nconst MISSING_VALUES = 'beforeOffsetOf:make sure to define offset unit and key';\nconst INVALID_AFTER_KEY = 'beforeOffsetOf:2nd argument must be a valid calc key';\nconst INVALID_AFTER_UNIT = 'beforeOffsetOf:1st argument must be a number';\n/**\n * Enforces the field value to be before a given time period offset.\n *\n * The `period` value has to be one of the following\n *\n * - years\n * - quarters\n * - months\n * - weeks\n * - days\n * - hours\n * - minutes\n * - seconds\n * - milliseconds\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   meetup: 'date|before_offset_of:4,months'\n * }\n *\n * // or\n * const rules = {\n *   meetup: [\n *     validations.date(),\n *     validations.beforeOffsetOf([4, 'months'])\n *   ]\n * }\n * ```\n */\n\nconst validation = {\n  async: false,\n\n  compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUES, 2);\n    const diffUnit = indicative_utils_1.cast(args[0], 'integer', INVALID_AFTER_UNIT);\n    const key = args[1];\n\n    if (!utils_1.dateOffsetKeys.includes(key)) {\n      throw new Error(INVALID_AFTER_KEY);\n    }\n\n    return [Number(diffUnit), key];\n  },\n\n  validate: (data, field, [diffUnit, key], config) => {\n    const fieldValue = indicative_utils_1.getValue(data, field);\n\n    if (indicative_utils_1.skippable(fieldValue, field, config)) {\n      return true;\n    }\n\n    if (!fieldValue) {\n      return false;\n    }\n\n    return beforeOffsetOf_1.beforeOffsetOf(fieldValue, diffUnit, key);\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-rules/build/src/validations/date-string/beforeOffsetOf.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","utils_1","beforeOffsetOf_1","MISSING_VALUES","INVALID_AFTER_KEY","INVALID_AFTER_UNIT","validation","async","compile","args","ensureLength","diffUnit","cast","key","dateOffsetKeys","includes","Error","Number","validate","data","field","config","fieldValue","getValue","skippable","beforeOffsetOf","default"],"mappings":"AAAA;AACA;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMG,cAAc,GAAG,wDAAvB;AACA,MAAMC,iBAAiB,GAAG,sDAA1B;AACA,MAAMC,kBAAkB,GAAG,8CAA3B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,MAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;;AAEfC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACVV,IAAAA,kBAAkB,CAACW,YAAnB,CAAgCD,IAAhC,EAAsCN,cAAtC,EAAsD,CAAtD;AACA,UAAMQ,QAAQ,GAAGZ,kBAAkB,CAACa,IAAnB,CAAwBH,IAAI,CAAC,CAAD,CAA5B,EAAiC,SAAjC,EAA4CJ,kBAA5C,CAAjB;AACA,UAAMQ,GAAG,GAAGJ,IAAI,CAAC,CAAD,CAAhB;;AACA,QAAI,CAACR,OAAO,CAACa,cAAR,CAAuBC,QAAvB,CAAgCF,GAAhC,CAAL,EAA2C;AACvC,YAAM,IAAIG,KAAJ,CAAUZ,iBAAV,CAAN;AACH;;AACD,WAAO,CAACa,MAAM,CAACN,QAAD,CAAP,EAAmBE,GAAnB,CAAP;AACH,GAVc;;AAWfK,EAAAA,QAAQ,EAAE,CAACC,IAAD,EAAOC,KAAP,EAAc,CAACT,QAAD,EAAWE,GAAX,CAAd,EAA+BQ,MAA/B,KAA0C;AAChD,UAAMC,UAAU,GAAGvB,kBAAkB,CAACwB,QAAnB,CAA4BJ,IAA5B,EAAkCC,KAAlC,CAAnB;;AACA,QAAIrB,kBAAkB,CAACyB,SAAnB,CAA6BF,UAA7B,EAAyCF,KAAzC,EAAgDC,MAAhD,CAAJ,EAA6D;AACzD,aAAO,IAAP;AACH;;AACD,QAAI,CAACC,UAAL,EAAiB;AACb,aAAO,KAAP;AACH;;AACD,WAAOpB,gBAAgB,CAACuB,cAAjB,CAAgCH,UAAhC,EAA4CX,QAA5C,EAAsDE,GAAtD,CAAP;AACH;AApBc,CAAnB;AAsBAhB,OAAO,CAAC6B,OAAR,GAAkBpB,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst utils_1 = require(\"../../utils\");\nconst beforeOffsetOf_1 = require(\"../../raw/beforeOffsetOf\");\nconst MISSING_VALUES = 'beforeOffsetOf:make sure to define offset unit and key';\nconst INVALID_AFTER_KEY = 'beforeOffsetOf:2nd argument must be a valid calc key';\nconst INVALID_AFTER_UNIT = 'beforeOffsetOf:1st argument must be a number';\n/**\n * Enforces the field value to be before a given time period offset.\n *\n * The `period` value has to be one of the following\n *\n * - years\n * - quarters\n * - months\n * - weeks\n * - days\n * - hours\n * - minutes\n * - seconds\n * - milliseconds\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   meetup: 'date|before_offset_of:4,months'\n * }\n *\n * // or\n * const rules = {\n *   meetup: [\n *     validations.date(),\n *     validations.beforeOffsetOf([4, 'months'])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUES, 2);\n        const diffUnit = indicative_utils_1.cast(args[0], 'integer', INVALID_AFTER_UNIT);\n        const key = args[1];\n        if (!utils_1.dateOffsetKeys.includes(key)) {\n            throw new Error(INVALID_AFTER_KEY);\n        }\n        return [Number(diffUnit), key];\n    },\n    validate: (data, field, [diffUnit, key], config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        if (indicative_utils_1.skippable(fieldValue, field, config)) {\n            return true;\n        }\n        if (!fieldValue) {\n            return false;\n        }\n        return beforeOffsetOf_1.beforeOffsetOf(fieldValue, diffUnit, key);\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}