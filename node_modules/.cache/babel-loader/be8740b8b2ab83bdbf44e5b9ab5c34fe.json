{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst indicative_utils_1 = require(\"indicative-utils\");\n\nconst after_1 = require(\"../../raw/after\");\n\nconst MISSING_VALUE = 'after:make sure to define the after date';\nconst INVALID_TYPE = 'after:after date must be defined as string or date object';\n/**\n * Enforces the field value to be after the expected date.\n * This method uses [isAfter](https://date-fns.org/docs/isAfter) function of date-fns.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   confCall: `date|after:${new Date()}`\n * }\n *\n * // or\n * const rules = {\n *   confCall: [\n *     validations.date(),\n *     validations.after([new Date()])\n *   ]\n * }\n * ```\n */\n\nconst validation = {\n  async: false,\n\n  compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n    const afterDate = indicative_utils_1.cast(args[0], 'date', INVALID_TYPE);\n    return [afterDate];\n  },\n\n  validate: (data, field, [comparisonDate], config) => {\n    const fieldValue = indicative_utils_1.getValue(data, field);\n    return indicative_utils_1.skippable(fieldValue, field, config) || after_1.after(fieldValue, comparisonDate);\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-rules/build/src/validations/date-string/after.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","after_1","MISSING_VALUE","INVALID_TYPE","validation","async","compile","args","ensureLength","afterDate","cast","validate","data","field","comparisonDate","config","fieldValue","getValue","skippable","after","default"],"mappings":"AAAA;AACA;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAME,aAAa,GAAG,0CAAtB;AACA,MAAMC,YAAY,GAAG,2DAArB;AACA;;;;;;;;;;;;;;;;;;;;;AAoBA,MAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;;AAEfC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACVR,IAAAA,kBAAkB,CAACS,YAAnB,CAAgCD,IAAhC,EAAsCL,aAAtC,EAAqD,CAArD;AACA,UAAMO,SAAS,GAAGV,kBAAkB,CAACW,IAAnB,CAAwBH,IAAI,CAAC,CAAD,CAA5B,EAAiC,MAAjC,EAAyCJ,YAAzC,CAAlB;AACA,WAAO,CAACM,SAAD,CAAP;AACH,GANc;;AAOfE,EAAAA,QAAQ,EAAE,CAACC,IAAD,EAAOC,KAAP,EAAc,CAACC,cAAD,CAAd,EAAgCC,MAAhC,KAA2C;AACjD,UAAMC,UAAU,GAAGjB,kBAAkB,CAACkB,QAAnB,CAA4BL,IAA5B,EAAkCC,KAAlC,CAAnB;AACA,WAAOd,kBAAkB,CAACmB,SAAnB,CAA6BF,UAA7B,EAAyCH,KAAzC,EAAgDE,MAAhD,KAA2Dd,OAAO,CAACkB,KAAR,CAAcH,UAAd,EAA0BF,cAA1B,CAAlE;AACH;AAVc,CAAnB;AAYAjB,OAAO,CAACuB,OAAR,GAAkBhB,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst after_1 = require(\"../../raw/after\");\nconst MISSING_VALUE = 'after:make sure to define the after date';\nconst INVALID_TYPE = 'after:after date must be defined as string or date object';\n/**\n * Enforces the field value to be after the expected date.\n * This method uses [isAfter](https://date-fns.org/docs/isAfter) function of date-fns.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   confCall: `date|after:${new Date()}`\n * }\n *\n * // or\n * const rules = {\n *   confCall: [\n *     validations.date(),\n *     validations.after([new Date()])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n        const afterDate = indicative_utils_1.cast(args[0], 'date', INVALID_TYPE);\n        return [afterDate];\n    },\n    validate: (data, field, [comparisonDate], config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        return indicative_utils_1.skippable(fieldValue, field, config) || after_1.after(fieldValue, comparisonDate);\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}