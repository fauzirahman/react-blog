{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst indicative_utils_1 = require(\"indicative-utils\");\n\nconst MISSING_VALUE = 'size: make sure to define length value';\nconst INVALID_TYPE = 'size: length must be defined as an integer';\n/**\n * Enforces the value to have exact length as per defined by the rule. The\n * value type has to be a `string` or `array`, otherwise validation will\n * fail.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   username: 'size:40'\n * }\n *\n * // or\n * const rules = {\n *   username: [\n *     validations.size([40])\n *   ]\n * }\n * ```\n */\n\nconst validation = {\n  async: false,\n\n  /**\n   * Cleaning up user arguments to make sure that they are\n   * useable at runtime\n   */\n  compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n    const maxLength = indicative_utils_1.cast(args[0], 'integer', INVALID_TYPE);\n    return [maxLength];\n  },\n\n  /**\n   * Validating runtime data\n   */\n  validate: (data, field, [size], config) => {\n    const fieldValue = indicative_utils_1.getValue(data, field);\n\n    if (indicative_utils_1.skippable(fieldValue, field, config)) {\n      return true;\n    }\n\n    if (Array.isArray(fieldValue) || typeof fieldValue === 'string') {\n      return fieldValue.length === size;\n    }\n\n    return false;\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-rules/build/src/validations/array-and-string/size.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","MISSING_VALUE","INVALID_TYPE","validation","async","compile","args","ensureLength","maxLength","cast","validate","data","field","size","config","fieldValue","getValue","skippable","Array","isArray","length","default"],"mappings":"AAAA;AACA;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,MAAMC,aAAa,GAAG,wCAAtB;AACA,MAAMC,YAAY,GAAG,4CAArB;AACA;;;;;;;;;;;;;;;;;;;;;AAoBA,MAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;;AAEf;;;;AAIAC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACVP,IAAAA,kBAAkB,CAACQ,YAAnB,CAAgCD,IAAhC,EAAsCL,aAAtC,EAAqD,CAArD;AACA,UAAMO,SAAS,GAAGT,kBAAkB,CAACU,IAAnB,CAAwBH,IAAI,CAAC,CAAD,CAA5B,EAAiC,SAAjC,EAA4CJ,YAA5C,CAAlB;AACA,WAAO,CAACM,SAAD,CAAP;AACH,GAVc;;AAWf;;;AAGAE,EAAAA,QAAQ,EAAE,CAACC,IAAD,EAAOC,KAAP,EAAc,CAACC,IAAD,CAAd,EAAsBC,MAAtB,KAAiC;AACvC,UAAMC,UAAU,GAAGhB,kBAAkB,CAACiB,QAAnB,CAA4BL,IAA5B,EAAkCC,KAAlC,CAAnB;;AACA,QAAIb,kBAAkB,CAACkB,SAAnB,CAA6BF,UAA7B,EAAyCH,KAAzC,EAAgDE,MAAhD,CAAJ,EAA6D;AACzD,aAAO,IAAP;AACH;;AACD,QAAII,KAAK,CAACC,OAAN,CAAcJ,UAAd,KAA6B,OAAQA,UAAR,KAAwB,QAAzD,EAAmE;AAC/D,aAAOA,UAAU,CAACK,MAAX,KAAsBP,IAA7B;AACH;;AACD,WAAO,KAAP;AACH;AAvBc,CAAnB;AAyBAhB,OAAO,CAACwB,OAAR,GAAkBlB,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst MISSING_VALUE = 'size: make sure to define length value';\nconst INVALID_TYPE = 'size: length must be defined as an integer';\n/**\n * Enforces the value to have exact length as per defined by the rule. The\n * value type has to be a `string` or `array`, otherwise validation will\n * fail.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   username: 'size:40'\n * }\n *\n * // or\n * const rules = {\n *   username: [\n *     validations.size([40])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    /**\n     * Cleaning up user arguments to make sure that they are\n     * useable at runtime\n     */\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n        const maxLength = indicative_utils_1.cast(args[0], 'integer', INVALID_TYPE);\n        return [maxLength];\n    },\n    /**\n     * Validating runtime data\n     */\n    validate: (data, field, [size], config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        if (indicative_utils_1.skippable(fieldValue, field, config)) {\n            return true;\n        }\n        if (Array.isArray(fieldValue) || typeof (fieldValue) === 'string') {\n            return fieldValue.length === size;\n        }\n        return false;\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}