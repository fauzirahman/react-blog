{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar indicative_utils_1 = require(\"indicative-utils\");\n\nvar subset_1 = require(\"../../raw/subset\");\n\nvar isString_1 = require(\"../../raw/isString\");\n\nvar MISSING_VALUE = 'subset:make sure to define subset collection';\n/**\n * Enforces the value of a given field is a subset of expected values. The\n * field value must be an `array` or a `string` of comma seperated values.\n *\n * [casts]\n *   [label fromText=\"comma seperated string\", from=\"string\", to=\"array\"]\n * [/casts]\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   sort_by: 'subset:email,id,name'\n * }\n *\n * // or\n * const rules = {\n *   sort_by: [\n *     validations.subset(['email', 'id', 'name'])\n *   ]\n * }\n * ```\n */\n\nvar validation = {\n  async: false,\n  compile: function compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n    return args.map(function (arg) {\n      return indicative_utils_1.cast(arg, 'string');\n    });\n  },\n  validate: function validate(data, field, args, config) {\n    var fieldValue = indicative_utils_1.getValue(data, field);\n\n    if (indicative_utils_1.skippable(fieldValue, field, config)) {\n      return true;\n    }\n    /**\n     * Convert to array if value is a string\n     */\n\n\n    if (isString_1.isString(fieldValue)) {\n      fieldValue = fieldValue.split(',').map(function (val) {\n        return val.trim();\n      });\n    } else if (Array.isArray(fieldValue)) {\n      fieldValue = fieldValue.map(function (value) {\n        return indicative_utils_1.cast(value, 'string');\n      });\n    } else {\n      return false;\n    }\n\n    if (!subset_1.subset(fieldValue, args)) {\n      return false;\n    }\n    /**\n     * Mutate data field\n     */\n\n\n    indicative_utils_1.patchValue(data, field, fieldValue);\n    return true;\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-rules/build/src/validations/array-and-string/subset.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","subset_1","isString_1","MISSING_VALUE","validation","async","compile","args","ensureLength","map","arg","cast","validate","data","field","config","fieldValue","getValue","skippable","isString","split","val","trim","Array","isArray","subset","patchValue","default"],"mappings":"AAAA;AACA;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,kBAAD,CAAxB;;AACA,IAAME,UAAU,GAAGF,OAAO,CAAC,oBAAD,CAA1B;;AACA,IAAMG,aAAa,GAAG,8CAAtB;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;AAEfC,EAAAA,OAFe,mBAEPC,IAFO,EAED;AACVR,IAAAA,kBAAkB,CAACS,YAAnB,CAAgCD,IAAhC,EAAsCJ,aAAtC,EAAqD,CAArD;AACA,WAAOI,IAAI,CAACE,GAAL,CAAS,UAACC,GAAD;AAAA,aAASX,kBAAkB,CAACY,IAAnB,CAAwBD,GAAxB,EAA6B,QAA7B,CAAT;AAAA,KAAT,CAAP;AACH,GALc;AAMfE,EAAAA,QAAQ,EAAE,kBAACC,IAAD,EAAOC,KAAP,EAAcP,IAAd,EAAoBQ,MAApB,EAA+B;AACrC,QAAIC,UAAU,GAAGjB,kBAAkB,CAACkB,QAAnB,CAA4BJ,IAA5B,EAAkCC,KAAlC,CAAjB;;AACA,QAAIf,kBAAkB,CAACmB,SAAnB,CAA6BF,UAA7B,EAAyCF,KAAzC,EAAgDC,MAAhD,CAAJ,EAA6D;AACzD,aAAO,IAAP;AACH;AACD;;;;;AAGA,QAAIb,UAAU,CAACiB,QAAX,CAAoBH,UAApB,CAAJ,EAAqC;AACjCA,MAAAA,UAAU,GAAGA,UAAU,CAACI,KAAX,CAAiB,GAAjB,EAAsBX,GAAtB,CAA0B,UAACY,GAAD;AAAA,eAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,OAA1B,CAAb;AACH,KAFD,MAGK,IAAIC,KAAK,CAACC,OAAN,CAAcR,UAAd,CAAJ,EAA+B;AAChCA,MAAAA,UAAU,GAAGA,UAAU,CAACP,GAAX,CAAe,UAACX,KAAD;AAAA,eAAWC,kBAAkB,CAACY,IAAnB,CAAwBb,KAAxB,EAA+B,QAA/B,CAAX;AAAA,OAAf,CAAb;AACH,KAFI,MAGA;AACD,aAAO,KAAP;AACH;;AACD,QAAI,CAACG,QAAQ,CAACwB,MAAT,CAAgBT,UAAhB,EAA4BT,IAA5B,CAAL,EAAwC;AACpC,aAAO,KAAP;AACH;AACD;;;;;AAGAR,IAAAA,kBAAkB,CAAC2B,UAAnB,CAA8Bb,IAA9B,EAAoCC,KAApC,EAA2CE,UAA3C;AACA,WAAO,IAAP;AACH;AA/Bc,CAAnB;AAiCAnB,OAAO,CAAC8B,OAAR,GAAkBvB,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst subset_1 = require(\"../../raw/subset\");\nconst isString_1 = require(\"../../raw/isString\");\nconst MISSING_VALUE = 'subset:make sure to define subset collection';\n/**\n * Enforces the value of a given field is a subset of expected values. The\n * field value must be an `array` or a `string` of comma seperated values.\n *\n * [casts]\n *   [label fromText=\"comma seperated string\", from=\"string\", to=\"array\"]\n * [/casts]\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   sort_by: 'subset:email,id,name'\n * }\n *\n * // or\n * const rules = {\n *   sort_by: [\n *     validations.subset(['email', 'id', 'name'])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n        return args.map((arg) => indicative_utils_1.cast(arg, 'string'));\n    },\n    validate: (data, field, args, config) => {\n        let fieldValue = indicative_utils_1.getValue(data, field);\n        if (indicative_utils_1.skippable(fieldValue, field, config)) {\n            return true;\n        }\n        /**\n         * Convert to array if value is a string\n         */\n        if (isString_1.isString(fieldValue)) {\n            fieldValue = fieldValue.split(',').map((val) => val.trim());\n        }\n        else if (Array.isArray(fieldValue)) {\n            fieldValue = fieldValue.map((value) => indicative_utils_1.cast(value, 'string'));\n        }\n        else {\n            return false;\n        }\n        if (!subset_1.subset(fieldValue, args)) {\n            return false;\n        }\n        /**\n         * Mutate data field\n         */\n        indicative_utils_1.patchValue(data, field, fieldValue);\n        return true;\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}