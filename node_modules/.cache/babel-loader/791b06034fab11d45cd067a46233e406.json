{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nvar _slicedToArray = require(\"/opt/lampp/htdocs/blog-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar indicative_utils_1 = require(\"indicative-utils\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar afterOffsetOf_1 = require(\"../../raw/afterOffsetOf\");\n\nvar MISSING_VALUES = 'afterOffsetOf:make sure to define offset unit and key';\nvar INVALID_AFTER_KEY = 'afterOffsetOf:2nd argument must be a valid calc key';\nvar INVALID_AFTER_UNIT = 'afterOffsetOf:1st argument must be a number';\n/**\n * Enforces the field value to be after a given time period offset.\n *\n * The `period` value has to be one of the following\n *\n * - years\n * - quarters\n * - months\n * - weeks\n * - days\n * - hours\n * - minutes\n * - seconds\n * - milliseconds\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   meetup: 'date|after_offset_of:4,months'\n * }\n *\n * // or\n * const rules = {\n *   meetup: [\n *     validations.date(),\n *     validations.afterOffsetOf([4, 'months'])\n *   ]\n * }\n * ```\n */\n\nvar validation = {\n  async: false,\n  compile: function compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUES, 2);\n    var diffUnit = indicative_utils_1.cast(args[0], 'integer', INVALID_AFTER_UNIT);\n    var key = args[1];\n\n    if (!utils_1.dateOffsetKeys.includes(key)) {\n      throw new Error(INVALID_AFTER_KEY);\n    }\n\n    return [Number(diffUnit), key];\n  },\n  validate: function validate(data, field, _ref, config) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        diffUnit = _ref2[0],\n        key = _ref2[1];\n\n    var fieldValue = indicative_utils_1.getValue(data, field);\n\n    if (indicative_utils_1.skippable(fieldValue, field, config)) {\n      return true;\n    }\n\n    if (!fieldValue) {\n      return false;\n    }\n\n    return afterOffsetOf_1.afterOffsetOf(fieldValue, diffUnit, key);\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-rules/build/src/validations/date-string/afterOffsetOf.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","utils_1","afterOffsetOf_1","MISSING_VALUES","INVALID_AFTER_KEY","INVALID_AFTER_UNIT","validation","async","compile","args","ensureLength","diffUnit","cast","key","dateOffsetKeys","includes","Error","Number","validate","data","field","config","fieldValue","getValue","skippable","afterOffsetOf","default"],"mappings":"AAAA;AACA;;;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAME,eAAe,GAAGF,OAAO,CAAC,yBAAD,CAA/B;;AACA,IAAMG,cAAc,GAAG,uDAAvB;AACA,IAAMC,iBAAiB,GAAG,qDAA1B;AACA,IAAMC,kBAAkB,GAAG,6CAA3B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,IAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;AAEfC,EAAAA,OAFe,mBAEPC,IAFO,EAED;AACVV,IAAAA,kBAAkB,CAACW,YAAnB,CAAgCD,IAAhC,EAAsCN,cAAtC,EAAsD,CAAtD;AACA,QAAMQ,QAAQ,GAAGZ,kBAAkB,CAACa,IAAnB,CAAwBH,IAAI,CAAC,CAAD,CAA5B,EAAiC,SAAjC,EAA4CJ,kBAA5C,CAAjB;AACA,QAAMQ,GAAG,GAAGJ,IAAI,CAAC,CAAD,CAAhB;;AACA,QAAI,CAACR,OAAO,CAACa,cAAR,CAAuBC,QAAvB,CAAgCF,GAAhC,CAAL,EAA2C;AACvC,YAAM,IAAIG,KAAJ,CAAUZ,iBAAV,CAAN;AACH;;AACD,WAAO,CAACa,MAAM,CAACN,QAAD,CAAP,EAAmBE,GAAnB,CAAP;AACH,GAVc;AAWfK,EAAAA,QAAQ,EAAE,kBAACC,IAAD,EAAOC,KAAP,QAA+BC,MAA/B,EAA0C;AAAA;AAAA,QAA3BV,QAA2B;AAAA,QAAjBE,GAAiB;;AAChD,QAAMS,UAAU,GAAGvB,kBAAkB,CAACwB,QAAnB,CAA4BJ,IAA5B,EAAkCC,KAAlC,CAAnB;;AACA,QAAIrB,kBAAkB,CAACyB,SAAnB,CAA6BF,UAA7B,EAAyCF,KAAzC,EAAgDC,MAAhD,CAAJ,EAA6D;AACzD,aAAO,IAAP;AACH;;AACD,QAAI,CAACC,UAAL,EAAiB;AACb,aAAO,KAAP;AACH;;AACD,WAAOpB,eAAe,CAACuB,aAAhB,CAA8BH,UAA9B,EAA0CX,QAA1C,EAAoDE,GAApD,CAAP;AACH;AApBc,CAAnB;AAsBAhB,OAAO,CAAC6B,OAAR,GAAkBpB,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst utils_1 = require(\"../../utils\");\nconst afterOffsetOf_1 = require(\"../../raw/afterOffsetOf\");\nconst MISSING_VALUES = 'afterOffsetOf:make sure to define offset unit and key';\nconst INVALID_AFTER_KEY = 'afterOffsetOf:2nd argument must be a valid calc key';\nconst INVALID_AFTER_UNIT = 'afterOffsetOf:1st argument must be a number';\n/**\n * Enforces the field value to be after a given time period offset.\n *\n * The `period` value has to be one of the following\n *\n * - years\n * - quarters\n * - months\n * - weeks\n * - days\n * - hours\n * - minutes\n * - seconds\n * - milliseconds\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   meetup: 'date|after_offset_of:4,months'\n * }\n *\n * // or\n * const rules = {\n *   meetup: [\n *     validations.date(),\n *     validations.afterOffsetOf([4, 'months'])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUES, 2);\n        const diffUnit = indicative_utils_1.cast(args[0], 'integer', INVALID_AFTER_UNIT);\n        const key = args[1];\n        if (!utils_1.dateOffsetKeys.includes(key)) {\n            throw new Error(INVALID_AFTER_KEY);\n        }\n        return [Number(diffUnit), key];\n    },\n    validate: (data, field, [diffUnit, key], config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        if (indicative_utils_1.skippable(fieldValue, field, config)) {\n            return true;\n        }\n        if (!fieldValue) {\n            return false;\n        }\n        return afterOffsetOf_1.afterOffsetOf(fieldValue, diffUnit, key);\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}