{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst indicative_utils_1 = require(\"indicative-utils\");\n\nconst raw_1 = require(\"../../raw\");\n\nconst MISSING_VALUE = 'different:make sure to define target field for comparison';\n/**\n * Enforces the field value to be different from the targeted field\n * value.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   secondary_email: 'different:primary_email'\n * }\n *\n * // or\n * const rules = {\n *   secondary_email: [\n *     validations.different(['primary_email'])\n *   ]\n * }\n * ```\n */\n\nconst validation = {\n  async: false,\n\n  compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n    return [String(args[0])];\n  },\n\n  validate: (data, field, [targetField], config) => {\n    const fieldValue = indicative_utils_1.getValue(data, field);\n\n    if (indicative_utils_1.skippable(fieldValue, field, config)) {\n      return true;\n    }\n\n    const targetFieldValue = indicative_utils_1.getValue(data, targetField);\n    return !raw_1.existy(targetFieldValue) || targetFieldValue !== fieldValue;\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-rules/build/src/validations/primitives/different.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","raw_1","MISSING_VALUE","validation","async","compile","args","ensureLength","String","validate","data","field","targetField","config","fieldValue","getValue","skippable","targetFieldValue","existy","default"],"mappings":"AAAA;AACA;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,WAAD,CAArB;;AACA,MAAME,aAAa,GAAG,2DAAtB;AACA;;;;;;;;;;;;;;;;;;;;AAmBA,MAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;;AAEfC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACVP,IAAAA,kBAAkB,CAACQ,YAAnB,CAAgCD,IAAhC,EAAsCJ,aAAtC,EAAqD,CAArD;AACA,WAAO,CAACM,MAAM,CAACF,IAAI,CAAC,CAAD,CAAL,CAAP,CAAP;AACH,GALc;;AAMfG,EAAAA,QAAQ,EAAE,CAACC,IAAD,EAAOC,KAAP,EAAc,CAACC,WAAD,CAAd,EAA6BC,MAA7B,KAAwC;AAC9C,UAAMC,UAAU,GAAGf,kBAAkB,CAACgB,QAAnB,CAA4BL,IAA5B,EAAkCC,KAAlC,CAAnB;;AACA,QAAIZ,kBAAkB,CAACiB,SAAnB,CAA6BF,UAA7B,EAAyCH,KAAzC,EAAgDE,MAAhD,CAAJ,EAA6D;AACzD,aAAO,IAAP;AACH;;AACD,UAAMI,gBAAgB,GAAGlB,kBAAkB,CAACgB,QAAnB,CAA4BL,IAA5B,EAAkCE,WAAlC,CAAzB;AACA,WAAO,CAACX,KAAK,CAACiB,MAAN,CAAaD,gBAAb,CAAD,IAAmCA,gBAAgB,KAAKH,UAA/D;AACH;AAbc,CAAnB;AAeAjB,OAAO,CAACsB,OAAR,GAAkBhB,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst raw_1 = require(\"../../raw\");\nconst MISSING_VALUE = 'different:make sure to define target field for comparison';\n/**\n * Enforces the field value to be different from the targeted field\n * value.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   secondary_email: 'different:primary_email'\n * }\n *\n * // or\n * const rules = {\n *   secondary_email: [\n *     validations.different(['primary_email'])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n        return [String(args[0])];\n    },\n    validate: (data, field, [targetField], config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        if (indicative_utils_1.skippable(fieldValue, field, config)) {\n            return true;\n        }\n        const targetFieldValue = indicative_utils_1.getValue(data, targetField);\n        return !raw_1.existy(targetFieldValue) || targetFieldValue !== fieldValue;\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}