{"ast":null,"code":"\"use strict\";\n/**\n * @module indicative-rules\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\n/**\n * Returns a boolean telling if an array is sorted in ascending\n * order.\n *\n * @example\n * ```js\n * const { is } = require('indicative')\n *\n * is.sorted([1, 2, 3, 4, 5, 6]) // true\n * is.sorted([1, 2, 4, 3, 5, 6]) // false\n * ```\n */\n\nexports.subset = function (input, superset) {\n  if (!Array.isArray(input) || !Array.isArray(superset)) {\n    return false;\n  }\n\n  return input.every(function (element) {\n    return superset.includes(element);\n  });\n};","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-rules/build/src/raw/subset.js"],"names":["Object","defineProperty","exports","value","subset","input","superset","Array","isArray","every","element","includes"],"mappings":"AAAA;AACA;;;;AAGAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;;;;;AAQA;;;;;;;;;;;;;AAYAD,OAAO,CAACE,MAAR,GAAiB,UAACC,KAAD,EAAQC,QAAR,EAAqB;AAClC,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAD,IAAyB,CAACE,KAAK,CAACC,OAAN,CAAcF,QAAd,CAA9B,EAAuD;AACnD,WAAO,KAAP;AACH;;AACD,SAAOD,KAAK,CAACI,KAAN,CAAY,UAAAC,OAAO;AAAA,WAAIJ,QAAQ,CAACK,QAAT,CAAkBD,OAAlB,CAAJ;AAAA,GAAnB,CAAP;AACH,CALD","sourcesContent":["\"use strict\";\n/**\n * @module indicative-rules\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n/**\n * Returns a boolean telling if an array is sorted in ascending\n * order.\n *\n * @example\n * ```js\n * const { is } = require('indicative')\n *\n * is.sorted([1, 2, 3, 4, 5, 6]) // true\n * is.sorted([1, 2, 4, 3, 5, 6]) // false\n * ```\n */\nexports.subset = (input, superset) => {\n    if (!Array.isArray(input) || !Array.isArray(superset)) {\n        return false;\n    }\n    return input.every(element => superset.includes(element));\n};\n"]},"metadata":{},"sourceType":"script"}