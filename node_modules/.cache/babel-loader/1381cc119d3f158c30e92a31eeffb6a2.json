{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nvar _slicedToArray = require(\"/opt/lampp/htdocs/react-blog/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar indicative_utils_1 = require(\"indicative-utils\");\n\nvar MISSING_VALUE = 'min: make sure to define min length';\nvar INVALID_TYPE = 'min: length must be defined as an integer';\n/**\n * Enforces the value to have minimum length as per defined by the rule. The\n * value type has to be a `string` or `array`, otherwise validation will\n * fail.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   password: 'min:6'\n * }\n *\n * // or\n * const rules = {\n *   password: [\n *     validations.min([6])\n *   ]\n * }\n * ```\n */\n\nvar validation = {\n  async: false,\n  compile: function compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n    var minLength = indicative_utils_1.cast(args[0], 'integer', INVALID_TYPE);\n    return [minLength];\n  },\n  validate: function validate(data, field, _ref, config) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        minLength = _ref2[0];\n\n    var fieldValue = indicative_utils_1.getValue(data, field);\n\n    if (indicative_utils_1.skippable(fieldValue, field, config)) {\n      return true;\n    }\n\n    if (Array.isArray(fieldValue) || typeof fieldValue === 'string') {\n      return fieldValue.length >= minLength;\n    }\n\n    return false;\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-rules/build/src/validations/array-and-string/min.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","MISSING_VALUE","INVALID_TYPE","validation","async","compile","args","ensureLength","minLength","cast","validate","data","field","config","fieldValue","getValue","skippable","Array","isArray","length","default"],"mappings":"AAAA;AACA;;;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,IAAMC,aAAa,GAAG,qCAAtB;AACA,IAAMC,YAAY,GAAG,2CAArB;AACA;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;AAEfC,EAAAA,OAFe,mBAEPC,IAFO,EAED;AACVP,IAAAA,kBAAkB,CAACQ,YAAnB,CAAgCD,IAAhC,EAAsCL,aAAtC,EAAqD,CAArD;AACA,QAAMO,SAAS,GAAGT,kBAAkB,CAACU,IAAnB,CAAwBH,IAAI,CAAC,CAAD,CAA5B,EAAiC,SAAjC,EAA4CJ,YAA5C,CAAlB;AACA,WAAO,CAACM,SAAD,CAAP;AACH,GANc;AAOfE,EAAAA,QAAQ,EAAE,kBAACC,IAAD,EAAOC,KAAP,QAA2BC,MAA3B,EAAsC;AAAA;AAAA,QAAvBL,SAAuB;;AAC5C,QAAMM,UAAU,GAAGf,kBAAkB,CAACgB,QAAnB,CAA4BJ,IAA5B,EAAkCC,KAAlC,CAAnB;;AACA,QAAIb,kBAAkB,CAACiB,SAAnB,CAA6BF,UAA7B,EAAyCF,KAAzC,EAAgDC,MAAhD,CAAJ,EAA6D;AACzD,aAAO,IAAP;AACH;;AACD,QAAII,KAAK,CAACC,OAAN,CAAcJ,UAAd,KAA6B,OAAQA,UAAR,KAAwB,QAAzD,EAAmE;AAC/D,aAAOA,UAAU,CAACK,MAAX,IAAqBX,SAA5B;AACH;;AACD,WAAO,KAAP;AACH;AAhBc,CAAnB;AAkBAX,OAAO,CAACuB,OAAR,GAAkBjB,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst MISSING_VALUE = 'min: make sure to define min length';\nconst INVALID_TYPE = 'min: length must be defined as an integer';\n/**\n * Enforces the value to have minimum length as per defined by the rule. The\n * value type has to be a `string` or `array`, otherwise validation will\n * fail.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   password: 'min:6'\n * }\n *\n * // or\n * const rules = {\n *   password: [\n *     validations.min([6])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n        const minLength = indicative_utils_1.cast(args[0], 'integer', INVALID_TYPE);\n        return [minLength];\n    },\n    validate: (data, field, [minLength], config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        if (indicative_utils_1.skippable(fieldValue, field, config)) {\n            return true;\n        }\n        if (Array.isArray(fieldValue) || typeof (fieldValue) === 'string') {\n            return fieldValue.length >= minLength;\n        }\n        return false;\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}