{"ast":null,"code":"\"use strict\";\n/**\n * @module indicative-rules\n */\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar indicative_utils_1 = require(\"indicative-utils\");\n\nvar pluralize = __importStar(require(\"pluralize\"));\n/**\n * Converts a value to it's singular version. If value is not a string\n * then it will be returned as it is.\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   modelName: 'singular'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   modelName: [\n *     sanitizations.singular()\n *   ]\n * }\n * ```\n */\n\n\nvar singular = {\n  sanitize: function sanitize(data, field) {\n    var fieldValue = indicative_utils_1.getValue(data, field);\n\n    if (typeof fieldValue !== 'string') {\n      return;\n    }\n\n    indicative_utils_1.patchValue(data, field, pluralize.singular(fieldValue));\n  }\n};\nexports.default = singular;","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-rules/build/src/sanitizations/singular.js"],"names":["__importStar","mod","__esModule","result","k","Object","hasOwnProperty","call","defineProperty","exports","value","indicative_utils_1","require","pluralize","singular","sanitize","data","field","fieldValue","getValue","patchValue","default"],"mappings":"AAAA;AACA;;;;AAGA,IAAIA,YAAY,GAAI,QAAQ,KAAKA,YAAd,IAA+B,UAAUC,GAAV,EAAe;AAC7D,MAAIA,GAAG,IAAIA,GAAG,CAACC,UAAf,EAA2B,OAAOD,GAAP;AAC3B,MAAIE,MAAM,GAAG,EAAb;AACA,MAAIF,GAAG,IAAI,IAAX,EAAiB,KAAK,IAAIG,CAAT,IAAcH,GAAd;AAAmB,QAAII,MAAM,CAACC,cAAP,CAAsBC,IAAtB,CAA2BN,GAA3B,EAAgCG,CAAhC,CAAJ,EAAwCD,MAAM,CAACC,CAAD,CAAN,GAAYH,GAAG,CAACG,CAAD,CAAf;AAA3D;AACjBD,EAAAA,MAAM,CAAC,SAAD,CAAN,GAAoBF,GAApB;AACA,SAAOE,MAAP;AACH,CAND;;AAOAE,MAAM,CAACG,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,IAAMC,SAAS,GAAGb,YAAY,CAACY,OAAO,CAAC,WAAD,CAAR,CAA9B;AACA;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAME,QAAQ,GAAG;AACbC,EAAAA,QADa,oBACJC,IADI,EACEC,KADF,EACS;AAClB,QAAIC,UAAU,GAAGP,kBAAkB,CAACQ,QAAnB,CAA4BH,IAA5B,EAAkCC,KAAlC,CAAjB;;AACA,QAAI,OAAQC,UAAR,KAAwB,QAA5B,EAAsC;AAClC;AACH;;AACDP,IAAAA,kBAAkB,CAACS,UAAnB,CAA8BJ,IAA9B,EAAoCC,KAApC,EAA2CJ,SAAS,CAACC,QAAV,CAAmBI,UAAnB,CAA3C;AACH;AAPY,CAAjB;AASAT,OAAO,CAACY,OAAR,GAAkBP,QAAlB","sourcesContent":["\"use strict\";\n/**\n * @module indicative-rules\n */\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst pluralize = __importStar(require(\"pluralize\"));\n/**\n * Converts a value to it's singular version. If value is not a string\n * then it will be returned as it is.\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   modelName: 'singular'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   modelName: [\n *     sanitizations.singular()\n *   ]\n * }\n * ```\n */\nconst singular = {\n    sanitize(data, field) {\n        let fieldValue = indicative_utils_1.getValue(data, field);\n        if (typeof (fieldValue) !== 'string') {\n            return;\n        }\n        indicative_utils_1.patchValue(data, field, pluralize.singular(fieldValue));\n    },\n};\nexports.default = singular;\n"]},"metadata":{},"sourceType":"script"}