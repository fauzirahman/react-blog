{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nvar _slicedToArray = require(\"/opt/lampp/htdocs/react-blog/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar indicative_utils_1 = require(\"indicative-utils\");\n\nvar MISSING_VALUE = 'equals:make sure to define the comparison string';\n/**\n * Enforces the field value to be loosely equal to the given value.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   coupon: 'equals:5050'\n * }\n *\n * // or\n * const rules = {\n *   coupon: [\n *     validations.equals([5050])\n *   ]\n * }\n * ```\n */\n\nvar validation = {\n  async: false,\n  compile: function compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n    return [args[0]];\n  },\n  validate: function validate(data, field, _ref, config) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        comparisonValue = _ref2[0];\n\n    var fieldValue = indicative_utils_1.getValue(data, field);\n    /* eslint eqeqeq: \"off\" */\n\n    return indicative_utils_1.skippable(fieldValue, field, config) || comparisonValue == fieldValue;\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-rules/build/src/validations/primitives/equals.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","MISSING_VALUE","validation","async","compile","args","ensureLength","validate","data","field","config","comparisonValue","fieldValue","getValue","skippable","default"],"mappings":"AAAA;AACA;;;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,IAAMC,aAAa,GAAG,kDAAtB;AACA;;;;;;;;;;;;;;;;;;;AAkBA,IAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;AAEfC,EAAAA,OAFe,mBAEPC,IAFO,EAED;AACVN,IAAAA,kBAAkB,CAACO,YAAnB,CAAgCD,IAAhC,EAAsCJ,aAAtC,EAAqD,CAArD;AACA,WAAO,CAACI,IAAI,CAAC,CAAD,CAAL,CAAP;AACH,GALc;AAMfE,EAAAA,QAAQ,EAAE,kBAACC,IAAD,EAAOC,KAAP,QAAiCC,MAAjC,EAA4C;AAAA;AAAA,QAA7BC,eAA6B;;AAClD,QAAMC,UAAU,GAAGb,kBAAkB,CAACc,QAAnB,CAA4BL,IAA5B,EAAkCC,KAAlC,CAAnB;AACA;;AACA,WAAOV,kBAAkB,CAACe,SAAnB,CAA6BF,UAA7B,EAAyCH,KAAzC,EAAgDC,MAAhD,KAA2DC,eAAe,IAAIC,UAArF;AACH;AAVc,CAAnB;AAYAf,OAAO,CAACkB,OAAR,GAAkBb,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst MISSING_VALUE = 'equals:make sure to define the comparison string';\n/**\n * Enforces the field value to be loosely equal to the given value.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   coupon: 'equals:5050'\n * }\n *\n * // or\n * const rules = {\n *   coupon: [\n *     validations.equals([5050])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n        return [args[0]];\n    },\n    validate: (data, field, [comparisonValue], config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        /* eslint eqeqeq: \"off\" */\n        return indicative_utils_1.skippable(fieldValue, field, config) || comparisonValue == fieldValue;\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}