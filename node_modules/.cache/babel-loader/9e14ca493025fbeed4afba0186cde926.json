{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst indicative_utils_1 = require(\"indicative-utils\");\n/**\n * Enforces the field value to be a valid whole number.\n *\n * Validation fails when number has a negative value. You must use `integer`\n * or `float` rules for that.\n *\n * [casts]\n *   [label from=\"string\", to=\"integer\"]\n * [/casts]\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   game_points: 'number'\n * }\n *\n * // or\n * const rules = {\n *   game_points: [\n *     validations.number()\n *   ]\n * }\n * ```\n */\n\n\nconst validation = {\n  async: false,\n  validate: (data, field, _args, config) => {\n    let fieldValue = indicative_utils_1.getValue(data, field);\n\n    if (indicative_utils_1.skippable(fieldValue, field, config)) {\n      return true;\n    }\n    /**\n     * Ensure value is castable to number\n     */\n\n\n    const castedValue = indicative_utils_1.cast(fieldValue, 'float');\n\n    if (castedValue === null) {\n      return false;\n    }\n    /**\n     * Whole numbers must be greater than zero\n     */\n\n\n    if (castedValue < 0) {\n      return false;\n    }\n    /**\n     * Mutate field value\n     */\n\n\n    indicative_utils_1.patchValue(data, field, castedValue);\n    return true;\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-rules/build/src/validations/number/number.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","validation","async","validate","data","field","_args","config","fieldValue","getValue","skippable","castedValue","cast","patchValue","default"],"mappings":"AAAA;AACA;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;AAEfC,EAAAA,QAAQ,EAAE,CAACC,IAAD,EAAOC,KAAP,EAAcC,KAAd,EAAqBC,MAArB,KAAgC;AACtC,QAAIC,UAAU,GAAGT,kBAAkB,CAACU,QAAnB,CAA4BL,IAA5B,EAAkCC,KAAlC,CAAjB;;AACA,QAAIN,kBAAkB,CAACW,SAAnB,CAA6BF,UAA7B,EAAyCH,KAAzC,EAAgDE,MAAhD,CAAJ,EAA6D;AACzD,aAAO,IAAP;AACH;AACD;;;;;AAGA,UAAMI,WAAW,GAAGZ,kBAAkB,CAACa,IAAnB,CAAwBJ,UAAxB,EAAoC,OAApC,CAApB;;AACA,QAAIG,WAAW,KAAK,IAApB,EAA0B;AACtB,aAAO,KAAP;AACH;AACD;;;;;AAGA,QAAIA,WAAW,GAAG,CAAlB,EAAqB;AACjB,aAAO,KAAP;AACH;AACD;;;;;AAGAZ,IAAAA,kBAAkB,CAACc,UAAnB,CAA8BT,IAA9B,EAAoCC,KAApC,EAA2CM,WAA3C;AACA,WAAO,IAAP;AACH;AAzBc,CAAnB;AA2BAd,OAAO,CAACiB,OAAR,GAAkBb,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\n/**\n * Enforces the field value to be a valid whole number.\n *\n * Validation fails when number has a negative value. You must use `integer`\n * or `float` rules for that.\n *\n * [casts]\n *   [label from=\"string\", to=\"integer\"]\n * [/casts]\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   game_points: 'number'\n * }\n *\n * // or\n * const rules = {\n *   game_points: [\n *     validations.number()\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    validate: (data, field, _args, config) => {\n        let fieldValue = indicative_utils_1.getValue(data, field);\n        if (indicative_utils_1.skippable(fieldValue, field, config)) {\n            return true;\n        }\n        /**\n         * Ensure value is castable to number\n         */\n        const castedValue = indicative_utils_1.cast(fieldValue, 'float');\n        if (castedValue === null) {\n            return false;\n        }\n        /**\n         * Whole numbers must be greater than zero\n         */\n        if (castedValue < 0) {\n            return false;\n        }\n        /**\n         * Mutate field value\n         */\n        indicative_utils_1.patchValue(data, field, castedValue);\n        return true;\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}