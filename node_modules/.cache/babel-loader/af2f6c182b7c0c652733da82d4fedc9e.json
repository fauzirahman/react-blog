{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst indicative_utils_1 = require(\"indicative-utils\");\n\nconst MISSING_VALUES = 'range:make sure to define min and max values';\nconst INVALID_TYPE = 'range:min and max values must be defined as integers';\n/**\n * Enforces the field value to be under a given range.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   age: 'integer|range:16,60'\n * }\n *\n * // or\n * const rules = {\n *   age: [\n *     validations.integer(),\n *     validations.range([16, 60])\n *   ]\n * }\n * ```\n */\n\nconst validation = {\n  async: false,\n\n  compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUES, 2);\n    const min = indicative_utils_1.cast(args[0], 'float', INVALID_TYPE);\n    const max = indicative_utils_1.cast(args[1], 'float', INVALID_TYPE);\n    return [min, max];\n  },\n\n  validate: (data, field, [min, max], config) => {\n    const fieldValue = indicative_utils_1.getValue(data, field);\n    return indicative_utils_1.skippable(fieldValue, field, config) || fieldValue >= min && fieldValue <= max;\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-rules/build/src/validations/number/range.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","MISSING_VALUES","INVALID_TYPE","validation","async","compile","args","ensureLength","min","cast","max","validate","data","field","config","fieldValue","getValue","skippable","default"],"mappings":"AAAA;AACA;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,MAAMC,cAAc,GAAG,8CAAvB;AACA,MAAMC,YAAY,GAAG,sDAArB;AACA;;;;;;;;;;;;;;;;;;;;AAmBA,MAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;;AAEfC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACVP,IAAAA,kBAAkB,CAACQ,YAAnB,CAAgCD,IAAhC,EAAsCL,cAAtC,EAAsD,CAAtD;AACA,UAAMO,GAAG,GAAGT,kBAAkB,CAACU,IAAnB,CAAwBH,IAAI,CAAC,CAAD,CAA5B,EAAiC,OAAjC,EAA0CJ,YAA1C,CAAZ;AACA,UAAMQ,GAAG,GAAGX,kBAAkB,CAACU,IAAnB,CAAwBH,IAAI,CAAC,CAAD,CAA5B,EAAiC,OAAjC,EAA0CJ,YAA1C,CAAZ;AACA,WAAO,CAACM,GAAD,EAAME,GAAN,CAAP;AACH,GAPc;;AAQfC,EAAAA,QAAQ,EAAE,CAACC,IAAD,EAAOC,KAAP,EAAc,CAACL,GAAD,EAAME,GAAN,CAAd,EAA0BI,MAA1B,KAAqC;AAC3C,UAAMC,UAAU,GAAGhB,kBAAkB,CAACiB,QAAnB,CAA4BJ,IAA5B,EAAkCC,KAAlC,CAAnB;AACA,WAAOd,kBAAkB,CAACkB,SAAnB,CAA6BF,UAA7B,EAAyCF,KAAzC,EAAgDC,MAAhD,KAA6DC,UAAU,IAAIP,GAAf,IAAwBO,UAAU,IAAIL,GAAzG;AACH;AAXc,CAAnB;AAaAb,OAAO,CAACqB,OAAR,GAAkBf,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst MISSING_VALUES = 'range:make sure to define min and max values';\nconst INVALID_TYPE = 'range:min and max values must be defined as integers';\n/**\n * Enforces the field value to be under a given range.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   age: 'integer|range:16,60'\n * }\n *\n * // or\n * const rules = {\n *   age: [\n *     validations.integer(),\n *     validations.range([16, 60])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUES, 2);\n        const min = indicative_utils_1.cast(args[0], 'float', INVALID_TYPE);\n        const max = indicative_utils_1.cast(args[1], 'float', INVALID_TYPE);\n        return [min, max];\n    },\n    validate: (data, field, [min, max], config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        return indicative_utils_1.skippable(fieldValue, field, config) || ((fieldValue >= min) && (fieldValue <= max));\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}