{"ast":null,"code":"\"use strict\";\n/**\n * @module compiler/validator\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n* indicative-compiler\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nconst indicative_parser_1 = require(\"indicative-parser\");\n\nconst TreeWalker_1 = require(\"../TreeWalker\");\n\nconst ArrayWrapper_1 = require(\"./ArrayWrapper\");\n\nconst ValidationsRunner_1 = require(\"./ValidationsRunner\");\n/**\n * Compiles rules and messages schema to an array of top level\n * functions highly optimized for speed.\n */\n\n\nclass Compiler {\n  constructor(schema, messages, validations) {\n    this.validations = validations;\n    this.parsedSchema = indicative_parser_1.rulesParser(schema);\n    this.parsedMessages = indicative_parser_1.messagesParser(messages);\n  }\n  /**\n   * Compiles the schema to an array of functions\n   */\n\n\n  compile() {\n    return new TreeWalker_1.TreeWalker(\n    /**\n     * Consume each node inside the tree\n     */\n    (field, type, rules, dotPath, pointer) => {\n      const messages = this.parsedMessages.fields[pointer] || {};\n      const genericMessage = this.parsedMessages.rules;\n      return new ValidationsRunner_1.ValidationsRunner(field, type, dotPath, rules, this.validations, messages, genericMessage);\n    },\n    /**\n     * Wraps array children, since the length of array is unknown.\n     */\n    (index, field, children, dotPath) => {\n      return new ArrayWrapper_1.ArrayWrapper(field, index, children, dotPath);\n    }).walk(this.parsedSchema);\n  }\n\n}\n\nexports.Compiler = Compiler;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-compiler/build/src/Validator/Compiler.js"],"names":["Object","defineProperty","exports","value","indicative_parser_1","require","TreeWalker_1","ArrayWrapper_1","ValidationsRunner_1","Compiler","constructor","schema","messages","validations","parsedSchema","rulesParser","parsedMessages","messagesParser","compile","TreeWalker","field","type","rules","dotPath","pointer","fields","genericMessage","ValidationsRunner","index","children","ArrayWrapper","walk"],"mappings":"AAAA;AACA;;;;AAGAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;;;;;AAQA,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,mBAAD,CAAnC;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,gBAAD,CAA9B;;AACA,MAAMG,mBAAmB,GAAGH,OAAO,CAAC,qBAAD,CAAnC;AACA;;;;;;AAIA,MAAMI,QAAN,CAAe;AACXC,EAAAA,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmBC,WAAnB,EAAgC;AACvC,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKC,YAAL,GAAoBV,mBAAmB,CAACW,WAApB,CAAgCJ,MAAhC,CAApB;AACA,SAAKK,cAAL,GAAsBZ,mBAAmB,CAACa,cAApB,CAAmCL,QAAnC,CAAtB;AACH;AACD;;;;;AAGAM,EAAAA,OAAO,GAAG;AACN,WAAO,IAAIZ,YAAY,CAACa,UAAjB;AACP;;;AAGA,KAACC,KAAD,EAAQC,IAAR,EAAcC,KAAd,EAAqBC,OAArB,EAA8BC,OAA9B,KAA0C;AACtC,YAAMZ,QAAQ,GAAG,KAAKI,cAAL,CAAoBS,MAApB,CAA2BD,OAA3B,KAAuC,EAAxD;AACA,YAAME,cAAc,GAAG,KAAKV,cAAL,CAAoBM,KAA3C;AACA,aAAO,IAAId,mBAAmB,CAACmB,iBAAxB,CAA0CP,KAA1C,EAAiDC,IAAjD,EAAuDE,OAAvD,EAAgED,KAAhE,EAAuE,KAAKT,WAA5E,EAAyFD,QAAzF,EAAmGc,cAAnG,CAAP;AACH,KARM;AASP;;;AAGA,KAACE,KAAD,EAAQR,KAAR,EAAeS,QAAf,EAAyBN,OAAzB,KAAqC;AACjC,aAAO,IAAIhB,cAAc,CAACuB,YAAnB,CAAgCV,KAAhC,EAAuCQ,KAAvC,EAA8CC,QAA9C,EAAwDN,OAAxD,CAAP;AACH,KAdM,EAcJQ,IAdI,CAcC,KAAKjB,YAdN,CAAP;AAeH;;AAzBU;;AA2BfZ,OAAO,CAACO,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\n/**\n * @module compiler/validator\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n* indicative-compiler\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nconst indicative_parser_1 = require(\"indicative-parser\");\nconst TreeWalker_1 = require(\"../TreeWalker\");\nconst ArrayWrapper_1 = require(\"./ArrayWrapper\");\nconst ValidationsRunner_1 = require(\"./ValidationsRunner\");\n/**\n * Compiles rules and messages schema to an array of top level\n * functions highly optimized for speed.\n */\nclass Compiler {\n    constructor(schema, messages, validations) {\n        this.validations = validations;\n        this.parsedSchema = indicative_parser_1.rulesParser(schema);\n        this.parsedMessages = indicative_parser_1.messagesParser(messages);\n    }\n    /**\n     * Compiles the schema to an array of functions\n     */\n    compile() {\n        return new TreeWalker_1.TreeWalker(\n        /**\n         * Consume each node inside the tree\n         */\n        (field, type, rules, dotPath, pointer) => {\n            const messages = this.parsedMessages.fields[pointer] || {};\n            const genericMessage = this.parsedMessages.rules;\n            return new ValidationsRunner_1.ValidationsRunner(field, type, dotPath, rules, this.validations, messages, genericMessage);\n        }, \n        /**\n         * Wraps array children, since the length of array is unknown.\n         */\n        (index, field, children, dotPath) => {\n            return new ArrayWrapper_1.ArrayWrapper(field, index, children, dotPath);\n        }).walk(this.parsedSchema);\n    }\n}\nexports.Compiler = Compiler;\n"]},"metadata":{},"sourceType":"script"}