{"ast":null,"code":"\"use strict\";\n/**\n * @module indicative-formatters\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Vanilla formatter is a plain formatter to collect validation\n * errors\n */\n\nclass JsonApiFormatter {\n  constructor() {\n    this.errors = [];\n  }\n  /**\n   * Adds error to the list of existing errors\n   */\n\n\n  addError(error, field, rule, args) {\n    let message = '';\n    let validation = rule;\n\n    if (error instanceof Error) {\n      message = error.message;\n      validation = 'ENGINE_EXCEPTION';\n    } else {\n      message = error;\n    }\n\n    this.errors.push({\n      source: {\n        pointer: field\n      },\n      title: validation,\n      detail: message,\n      meta: {\n        args\n      }\n    });\n  }\n  /**\n   * Returns an array of errors or `null` when there are no\n   * errors\n   */\n\n\n  toJSON() {\n    return this.errors.length ? {\n      errors: this.errors\n    } : null;\n  }\n\n}\n\nexports.JsonApiFormatter = JsonApiFormatter;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-formatters/build/src/JsonApiFormatter.js"],"names":["Object","defineProperty","exports","value","JsonApiFormatter","constructor","errors","addError","error","field","rule","args","message","validation","Error","push","source","pointer","title","detail","meta","toJSON","length"],"mappings":"AAAA;AACA;;;;AAGAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;AAIA,MAAMC,gBAAN,CAAuB;AACnBC,EAAAA,WAAW,GAAG;AACV,SAAKC,MAAL,GAAc,EAAd;AACH;AACD;;;;;AAGAC,EAAAA,QAAQ,CAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf,EAAqBC,IAArB,EAA2B;AAC/B,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,UAAU,GAAGH,IAAjB;;AACA,QAAIF,KAAK,YAAYM,KAArB,EAA4B;AACxBF,MAAAA,OAAO,GAAGJ,KAAK,CAACI,OAAhB;AACAC,MAAAA,UAAU,GAAG,kBAAb;AACH,KAHD,MAIK;AACDD,MAAAA,OAAO,GAAGJ,KAAV;AACH;;AACD,SAAKF,MAAL,CAAYS,IAAZ,CAAiB;AACbC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,OAAO,EAAER;AAAX,OADK;AAEbS,MAAAA,KAAK,EAAEL,UAFM;AAGbM,MAAAA,MAAM,EAAEP,OAHK;AAIbQ,MAAAA,IAAI,EAAE;AAAET,QAAAA;AAAF;AAJO,KAAjB;AAMH;AACD;;;;;;AAIAU,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKf,MAAL,CAAYgB,MAAZ,GAAqB;AAAEhB,MAAAA,MAAM,EAAE,KAAKA;AAAf,KAArB,GAA+C,IAAtD;AACH;;AA9BkB;;AAgCvBJ,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\n/**\n * @module indicative-formatters\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Vanilla formatter is a plain formatter to collect validation\n * errors\n */\nclass JsonApiFormatter {\n    constructor() {\n        this.errors = [];\n    }\n    /**\n     * Adds error to the list of existing errors\n     */\n    addError(error, field, rule, args) {\n        let message = '';\n        let validation = rule;\n        if (error instanceof Error) {\n            message = error.message;\n            validation = 'ENGINE_EXCEPTION';\n        }\n        else {\n            message = error;\n        }\n        this.errors.push({\n            source: { pointer: field },\n            title: validation,\n            detail: message,\n            meta: { args },\n        });\n    }\n    /**\n     * Returns an array of errors or `null` when there are no\n     * errors\n     */\n    toJSON() {\n        return this.errors.length ? { errors: this.errors } : null;\n    }\n}\nexports.JsonApiFormatter = JsonApiFormatter;\n"]},"metadata":{},"sourceType":"script"}