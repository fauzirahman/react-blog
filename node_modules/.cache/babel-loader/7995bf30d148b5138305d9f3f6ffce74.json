{"ast":null,"code":"\"use strict\";\n/**\n * @module compiler/sanitizer\n */\n\nvar _classCallCheck = require(\"/opt/lampp/htdocs/react-blog/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/lampp/htdocs/react-blog/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n* indicative-compiler\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nvar indicative_parser_1 = require(\"indicative-parser\");\n\nvar TreeWalker_1 = require(\"../TreeWalker\");\n\nvar ArrayWrapper_1 = require(\"./ArrayWrapper\");\n\nvar SanitizationsRunner_1 = require(\"./SanitizationsRunner\");\n/**\n * Compiles rules and messages schema to an array of top level\n * functions highly optimized for speed.\n */\n\n\nvar Compiler =\n/*#__PURE__*/\nfunction () {\n  function Compiler(schema, sanitizations) {\n    _classCallCheck(this, Compiler);\n\n    this.sanitizations = sanitizations;\n    this.parsedSchema = indicative_parser_1.rulesParser(schema);\n  }\n  /**\n   * Compiles the schema to an array of functions\n   */\n\n\n  _createClass(Compiler, [{\n    key: \"compile\",\n    value: function compile() {\n      var _this = this;\n\n      return new TreeWalker_1.TreeWalker(\n      /**\n       * Consume each node inside the tree\n       */\n      function (field, _, rules, dotPath) {\n        return new SanitizationsRunner_1.SanitizationsRunner(field, dotPath, rules, _this.sanitizations);\n      },\n      /**\n       * Wraps array children, since the length of array is unknown.\n       */\n      function (index, field, children, dotPath) {\n        return new ArrayWrapper_1.ArrayWrapper(field, index, children, dotPath);\n      }).walk(this.parsedSchema);\n    }\n  }]);\n\n  return Compiler;\n}();\n\nexports.Compiler = Compiler;","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-compiler/build/src/Sanitizer/Compiler.js"],"names":["Object","defineProperty","exports","value","indicative_parser_1","require","TreeWalker_1","ArrayWrapper_1","SanitizationsRunner_1","Compiler","schema","sanitizations","parsedSchema","rulesParser","TreeWalker","field","_","rules","dotPath","SanitizationsRunner","index","children","ArrayWrapper","walk"],"mappings":"AAAA;AACA;;;;;;;;AAGAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;;;;;AAQA,IAAMC,mBAAmB,GAAGC,OAAO,CAAC,mBAAD,CAAnC;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA5B;;AACA,IAAME,cAAc,GAAGF,OAAO,CAAC,gBAAD,CAA9B;;AACA,IAAMG,qBAAqB,GAAGH,OAAO,CAAC,uBAAD,CAArC;AACA;;;;;;IAIMI,Q;;;AACF,oBAAYC,MAAZ,EAAoBC,aAApB,EAAmC;AAAA;;AAC/B,SAAKA,aAAL,GAAqBA,aAArB;AACA,SAAKC,YAAL,GAAoBR,mBAAmB,CAACS,WAApB,CAAgCH,MAAhC,CAApB;AACH;AACD;;;;;;;8BAGU;AAAA;;AACN,aAAO,IAAIJ,YAAY,CAACQ,UAAjB;AACP;;;AAGA,gBAACC,KAAD,EAAQC,CAAR,EAAWC,KAAX,EAAkBC,OAAlB,EAA8B;AAC1B,eAAO,IAAIV,qBAAqB,CAACW,mBAA1B,CAA8CJ,KAA9C,EAAqDG,OAArD,EAA8DD,KAA9D,EAAqE,KAAI,CAACN,aAA1E,CAAP;AACH,OANM;AAOP;;;AAGA,gBAACS,KAAD,EAAQL,KAAR,EAAeM,QAAf,EAAyBH,OAAzB,EAAqC;AACjC,eAAO,IAAIX,cAAc,CAACe,YAAnB,CAAgCP,KAAhC,EAAuCK,KAAvC,EAA8CC,QAA9C,EAAwDH,OAAxD,CAAP;AACH,OAZM,EAYJK,IAZI,CAYC,KAAKX,YAZN,CAAP;AAaH;;;;;;AAELV,OAAO,CAACO,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\n/**\n * @module compiler/sanitizer\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n* indicative-compiler\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nconst indicative_parser_1 = require(\"indicative-parser\");\nconst TreeWalker_1 = require(\"../TreeWalker\");\nconst ArrayWrapper_1 = require(\"./ArrayWrapper\");\nconst SanitizationsRunner_1 = require(\"./SanitizationsRunner\");\n/**\n * Compiles rules and messages schema to an array of top level\n * functions highly optimized for speed.\n */\nclass Compiler {\n    constructor(schema, sanitizations) {\n        this.sanitizations = sanitizations;\n        this.parsedSchema = indicative_parser_1.rulesParser(schema);\n    }\n    /**\n     * Compiles the schema to an array of functions\n     */\n    compile() {\n        return new TreeWalker_1.TreeWalker(\n        /**\n         * Consume each node inside the tree\n         */\n        (field, _, rules, dotPath) => {\n            return new SanitizationsRunner_1.SanitizationsRunner(field, dotPath, rules, this.sanitizations);\n        }, \n        /**\n         * Wraps array children, since the length of array is unknown.\n         */\n        (index, field, children, dotPath) => {\n            return new ArrayWrapper_1.ArrayWrapper(field, index, children, dotPath);\n        }).walk(this.parsedSchema);\n    }\n}\nexports.Compiler = Compiler;\n"]},"metadata":{},"sourceType":"script"}