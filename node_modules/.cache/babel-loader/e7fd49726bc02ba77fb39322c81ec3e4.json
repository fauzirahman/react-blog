{"ast":null,"code":"\"use strict\";\n/**\n * @module indicative-rules\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar indicative_utils_1 = require(\"indicative-utils\");\n/**\n * Escapes HTML entities. Useful when you want to avoid XSS attacks.\n *\n * This method will only remove `&`, `\"`, `'`, `<` and `>` characters.\n * For advance escaping make use of a 3rd party library like\n * [he](https://github.com/mathiasbynens/he) and create\n * your own sanitization rule\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   message: 'escape'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   message: [\n *     sanitizations.escape()\n *   ]\n * }\n * ```\n */\n\n\nvar escape = {\n  sanitize: function sanitize(data, field) {\n    var fieldValue = indicative_utils_1.getValue(data, field);\n\n    if (typeof fieldValue !== 'string') {\n      return;\n    }\n\n    fieldValue = fieldValue.replace(/&/g, '&amp;') // replace &\n    .replace(/\"/g, '&quot;') // replace \"\n    .replace(/'/g, '&#x27;') // replace '\n    .replace(/</g, '&lt;') // replace <\n    .replace(/>/g, '&gt;'); // replace >\n\n    indicative_utils_1.patchValue(data, field, fieldValue);\n  }\n};\nexports.default = escape;","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-rules/build/src/sanitizations/escape.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","escape","sanitize","data","field","fieldValue","getValue","replace","patchValue","default"],"mappings":"AAAA;AACA;;;;AAGAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAMC,MAAM,GAAG;AACXC,EAAAA,QADW,oBACFC,IADE,EACIC,KADJ,EACW;AAClB,QAAIC,UAAU,GAAGN,kBAAkB,CAACO,QAAnB,CAA4BH,IAA5B,EAAkCC,KAAlC,CAAjB;;AACA,QAAI,OAAQC,UAAR,KAAwB,QAA5B,EAAsC;AAClC;AACH;;AACDA,IAAAA,UAAU,GAAGA,UAAU,CAClBE,OADQ,CACA,IADA,EACM,OADN,EACe;AADf,KAERA,OAFQ,CAEA,IAFA,EAEM,QAFN,EAEgB;AAFhB,KAGRA,OAHQ,CAGA,IAHA,EAGM,QAHN,EAGgB;AAHhB,KAIRA,OAJQ,CAIA,IAJA,EAIM,MAJN,EAIc;AAJd,KAKRA,OALQ,CAKA,IALA,EAKM,MALN,CAAb,CALkB,CAUU;;AAC5BR,IAAAA,kBAAkB,CAACS,UAAnB,CAA8BL,IAA9B,EAAoCC,KAApC,EAA2CC,UAA3C;AACH;AAbU,CAAf;AAeAR,OAAO,CAACY,OAAR,GAAkBR,MAAlB","sourcesContent":["\"use strict\";\n/**\n * @module indicative-rules\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\n/**\n * Escapes HTML entities. Useful when you want to avoid XSS attacks.\n *\n * This method will only remove `&`, `\"`, `'`, `<` and `>` characters.\n * For advance escaping make use of a 3rd party library like\n * [he](https://github.com/mathiasbynens/he) and create\n * your own sanitization rule\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   message: 'escape'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   message: [\n *     sanitizations.escape()\n *   ]\n * }\n * ```\n */\nconst escape = {\n    sanitize(data, field) {\n        let fieldValue = indicative_utils_1.getValue(data, field);\n        if (typeof (fieldValue) !== 'string') {\n            return;\n        }\n        fieldValue = fieldValue\n            .replace(/&/g, '&amp;') // replace &\n            .replace(/\"/g, '&quot;') // replace \"\n            .replace(/'/g, '&#x27;') // replace '\n            .replace(/</g, '&lt;') // replace <\n            .replace(/>/g, '&gt;'); // replace >\n        indicative_utils_1.patchValue(data, field, fieldValue);\n    },\n};\nexports.default = escape;\n"]},"metadata":{},"sourceType":"script"}