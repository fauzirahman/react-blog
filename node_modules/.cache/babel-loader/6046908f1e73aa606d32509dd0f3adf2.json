{"ast":null,"code":"\"use strict\";\n/**\n * @module indicative-rules\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\n/**\n * Returns a boolean telling if all of the `input` array items are\n * from the `comparison` array or not.\n *\n * @example\n * ```js\n * const { is } = require('indicative')\n *\n * const input = ['foo', 'bar']\n * const compareWith = ['foo', 'bar', 'baz']\n *\n * if (is.intersectAll(input, compareWith)) {\n * }\n * ```\n */\n\nexports.intersectAll = (input, intersectionArray) => {\n  if (!Array.isArray(input) || !Array.isArray(intersectionArray)) {\n    return false;\n  }\n\n  return input.filter(n => intersectionArray.indexOf(n) > -1).length === input.length;\n};","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-rules/build/src/raw/intersectAll.js"],"names":["Object","defineProperty","exports","value","intersectAll","input","intersectionArray","Array","isArray","filter","n","indexOf","length"],"mappings":"AAAA;AACA;;;;AAGAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;;;;;AAQA;;;;;;;;;;;;;;;;AAeAD,OAAO,CAACE,YAAR,GAAuB,CAACC,KAAD,EAAQC,iBAAR,KAA8B;AACjD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAD,IAAyB,CAACE,KAAK,CAACC,OAAN,CAAcF,iBAAd,CAA9B,EAAgE;AAC5D,WAAO,KAAP;AACH;;AACD,SAAOD,KAAK,CAACI,MAAN,CAAcC,CAAD,IAAOJ,iBAAiB,CAACK,OAAlB,CAA0BD,CAA1B,IAA+B,CAAC,CAApD,EAAuDE,MAAvD,KAAkEP,KAAK,CAACO,MAA/E;AACH,CALD","sourcesContent":["\"use strict\";\n/**\n * @module indicative-rules\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n/**\n * Returns a boolean telling if all of the `input` array items are\n * from the `comparison` array or not.\n *\n * @example\n * ```js\n * const { is } = require('indicative')\n *\n * const input = ['foo', 'bar']\n * const compareWith = ['foo', 'bar', 'baz']\n *\n * if (is.intersectAll(input, compareWith)) {\n * }\n * ```\n */\nexports.intersectAll = (input, intersectionArray) => {\n    if (!Array.isArray(input) || !Array.isArray(intersectionArray)) {\n        return false;\n    }\n    return input.filter((n) => intersectionArray.indexOf(n) > -1).length === input.length;\n};\n"]},"metadata":{},"sourceType":"script"}