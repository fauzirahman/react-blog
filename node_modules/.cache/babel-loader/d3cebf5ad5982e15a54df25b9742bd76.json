{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar indicative_utils_1 = require(\"indicative-utils\");\n\nvar inArray_1 = require(\"../../raw/inArray\");\n\nvar MISSING_VALUE = 'in:make sure to define search collection';\n/**\n * Enforces the field value to be one of the allowed values.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   post_status: 'in:draft,published'\n * }\n *\n * // or\n * const rules = {\n *   post_status: [\n *     validations.in(['draft', 'published'])\n *   ]\n * }\n * ```ts\n */\n\nvar validation = {\n  async: false,\n  compile: function compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n    return args;\n  },\n  validate: function validate(data, field, args, config) {\n    var fieldValue = indicative_utils_1.getValue(data, field);\n    return indicative_utils_1.skippable(fieldValue, field, config) || inArray_1.inArray(fieldValue, args);\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-rules/build/src/validations/primitives/in.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","inArray_1","MISSING_VALUE","validation","async","compile","args","ensureLength","validate","data","field","config","fieldValue","getValue","skippable","inArray","default"],"mappings":"AAAA;AACA;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,mBAAD,CAAzB;;AACA,IAAME,aAAa,GAAG,0CAAtB;AACA;;;;;;;;;;;;;;;;;;;AAkBA,IAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;AAEfC,EAAAA,OAFe,mBAEPC,IAFO,EAED;AACVP,IAAAA,kBAAkB,CAACQ,YAAnB,CAAgCD,IAAhC,EAAsCJ,aAAtC,EAAqD,CAArD;AACA,WAAOI,IAAP;AACH,GALc;AAMfE,EAAAA,QAAQ,EAAE,kBAACC,IAAD,EAAOC,KAAP,EAAcJ,IAAd,EAAoBK,MAApB,EAA+B;AACrC,QAAMC,UAAU,GAAGb,kBAAkB,CAACc,QAAnB,CAA4BJ,IAA5B,EAAkCC,KAAlC,CAAnB;AACA,WAAOX,kBAAkB,CAACe,SAAnB,CAA6BF,UAA7B,EAAyCF,KAAzC,EAAgDC,MAAhD,KAA2DV,SAAS,CAACc,OAAV,CAAkBH,UAAlB,EAA8BN,IAA9B,CAAlE;AACH;AATc,CAAnB;AAWAT,OAAO,CAACmB,OAAR,GAAkBb,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst inArray_1 = require(\"../../raw/inArray\");\nconst MISSING_VALUE = 'in:make sure to define search collection';\n/**\n * Enforces the field value to be one of the allowed values.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   post_status: 'in:draft,published'\n * }\n *\n * // or\n * const rules = {\n *   post_status: [\n *     validations.in(['draft', 'published'])\n *   ]\n * }\n * ```ts\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n        return args;\n    },\n    validate: (data, field, args, config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        return indicative_utils_1.skippable(fieldValue, field, config) || inArray_1.inArray(fieldValue, args);\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}