{"ast":null,"code":"\"use strict\";\n/**\n * @module indicative-formatters\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Vanilla formatter is a plain formatter to collect validation\n * errors\n */\n\nclass VanillaFormatter {\n  constructor() {\n    this.errors = [];\n  }\n  /**\n   * Adds error to the list of existing errors\n   */\n\n\n  addError(error, field, rule) {\n    let message = '';\n    let validation = rule;\n\n    if (error instanceof Error) {\n      message = error.message;\n      validation = 'ENGINE_EXCEPTION';\n    } else {\n      message = error;\n    }\n\n    this.errors.push({\n      message,\n      validation,\n      field\n    });\n  }\n  /**\n   * Returns an array of errors or `null` when there are no\n   * errors\n   */\n\n\n  toJSON() {\n    return this.errors.length ? this.errors : null;\n  }\n\n}\n\nexports.VanillaFormatter = VanillaFormatter;","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-formatters/build/src/VanillaFormatter.js"],"names":["Object","defineProperty","exports","value","VanillaFormatter","constructor","errors","addError","error","field","rule","message","validation","Error","push","toJSON","length"],"mappings":"AAAA;AACA;;;;AAGAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;AAIA,MAAMC,gBAAN,CAAuB;AACnBC,EAAAA,WAAW,GAAG;AACV,SAAKC,MAAL,GAAc,EAAd;AACH;AACD;;;;;AAGAC,EAAAA,QAAQ,CAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf,EAAqB;AACzB,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,UAAU,GAAGF,IAAjB;;AACA,QAAIF,KAAK,YAAYK,KAArB,EAA4B;AACxBF,MAAAA,OAAO,GAAGH,KAAK,CAACG,OAAhB;AACAC,MAAAA,UAAU,GAAG,kBAAb;AACH,KAHD,MAIK;AACDD,MAAAA,OAAO,GAAGH,KAAV;AACH;;AACD,SAAKF,MAAL,CAAYQ,IAAZ,CAAiB;AAAEH,MAAAA,OAAF;AAAWC,MAAAA,UAAX;AAAuBH,MAAAA;AAAvB,KAAjB;AACH;AACD;;;;;;AAIAM,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKT,MAAL,CAAYU,MAAZ,GAAqB,KAAKV,MAA1B,GAAmC,IAA1C;AACH;;AAzBkB;;AA2BvBJ,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\n/**\n * @module indicative-formatters\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Vanilla formatter is a plain formatter to collect validation\n * errors\n */\nclass VanillaFormatter {\n    constructor() {\n        this.errors = [];\n    }\n    /**\n     * Adds error to the list of existing errors\n     */\n    addError(error, field, rule) {\n        let message = '';\n        let validation = rule;\n        if (error instanceof Error) {\n            message = error.message;\n            validation = 'ENGINE_EXCEPTION';\n        }\n        else {\n            message = error;\n        }\n        this.errors.push({ message, validation, field });\n    }\n    /**\n     * Returns an array of errors or `null` when there are no\n     * errors\n     */\n    toJSON() {\n        return this.errors.length ? this.errors : null;\n    }\n}\nexports.VanillaFormatter = VanillaFormatter;\n"]},"metadata":{},"sourceType":"script"}