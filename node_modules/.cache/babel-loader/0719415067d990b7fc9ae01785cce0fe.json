{"ast":null,"code":"\"use strict\";\n/**\n * @module indicative-rules\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst indicative_utils_1 = require(\"indicative-utils\");\n\nconst normalizeEmail_1 = __importDefault(require(\"validator/lib/normalizeEmail\"));\n/**\n * Normalizes the email address by removing unwanted characters from it. For\n * example `foo+bar@gmail.com` will become `foobar@gmail.com` and also it\n * will normalize the characters case too.\n *\n * If value is not a string, it will be returned as it is, otherwise it is\n * passed to [validator.js](https://github.com/chriso/validator.js)\n * normalizeEmail method.\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   email: [\n *     sanitizations.normalizeEmail()\n *   ]\n * }\n *\n * // pass options\n * const sanitizationRules = {\n *   email: [\n *     sanitizations.normalizeEmail([{\n *       all_lowercase: true,\n *       icloud_remove_subaddress: true\n *     }])\n *   ]\n * }\n * ```\n */\n\n\nconst normalizeEmail = {\n  sanitize(data, field, args = []) {\n    let fieldValue = indicative_utils_1.getValue(data, field);\n\n    if (typeof fieldValue !== 'string') {\n      return;\n    }\n\n    indicative_utils_1.patchValue(data, field, normalizeEmail_1.default(fieldValue, args[0]));\n  }\n\n};\nexports.default = normalizeEmail;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-rules/build/src/sanitizations/normalizeEmail.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","indicative_utils_1","require","normalizeEmail_1","normalizeEmail","sanitize","data","field","args","fieldValue","getValue","patchValue","default"],"mappings":"AAAA;AACA;;;;AAGA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,MAAMC,gBAAgB,GAAGT,eAAe,CAACQ,OAAO,CAAC,8BAAD,CAAR,CAAxC;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,MAAME,cAAc,GAAG;AACnBC,EAAAA,QAAQ,CAACC,IAAD,EAAOC,KAAP,EAAcC,IAAI,GAAG,EAArB,EAAyB;AAC7B,QAAIC,UAAU,GAAGR,kBAAkB,CAACS,QAAnB,CAA4BJ,IAA5B,EAAkCC,KAAlC,CAAjB;;AACA,QAAI,OAAQE,UAAR,KAAwB,QAA5B,EAAsC;AAClC;AACH;;AACDR,IAAAA,kBAAkB,CAACU,UAAnB,CAA8BL,IAA9B,EAAoCC,KAApC,EAA2CJ,gBAAgB,CAACS,OAAjB,CAAyBH,UAAzB,EAAqCD,IAAI,CAAC,CAAD,CAAzC,CAA3C;AACH;;AAPkB,CAAvB;AASAT,OAAO,CAACa,OAAR,GAAkBR,cAAlB","sourcesContent":["\"use strict\";\n/**\n * @module indicative-rules\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst normalizeEmail_1 = __importDefault(require(\"validator/lib/normalizeEmail\"));\n/**\n * Normalizes the email address by removing unwanted characters from it. For\n * example `foo+bar@gmail.com` will become `foobar@gmail.com` and also it\n * will normalize the characters case too.\n *\n * If value is not a string, it will be returned as it is, otherwise it is\n * passed to [validator.js](https://github.com/chriso/validator.js)\n * normalizeEmail method.\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   email: [\n *     sanitizations.normalizeEmail()\n *   ]\n * }\n *\n * // pass options\n * const sanitizationRules = {\n *   email: [\n *     sanitizations.normalizeEmail([{\n *       all_lowercase: true,\n *       icloud_remove_subaddress: true\n *     }])\n *   ]\n * }\n * ```\n */\nconst normalizeEmail = {\n    sanitize(data, field, args = []) {\n        let fieldValue = indicative_utils_1.getValue(data, field);\n        if (typeof (fieldValue) !== 'string') {\n            return;\n        }\n        indicative_utils_1.patchValue(data, field, normalizeEmail_1.default(fieldValue, args[0]));\n    },\n};\nexports.default = normalizeEmail;\n"]},"metadata":{},"sourceType":"script"}