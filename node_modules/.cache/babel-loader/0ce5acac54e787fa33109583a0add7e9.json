{"ast":null,"code":"\"use strict\";\n/*\n * indicative-parser\n *\n * (c) Harminder Virk <virk@adonisjs.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst getBaseRules_1 = require(\"./getBaseRules\");\n\nconst getObjectType_1 = require(\"./getObjectType\");\n/**\n * Returns runtime node for an array type.\n */\n\n\nfunction getArrayType(schema, isOptional, rules) {\n  return {\n    getTree() {\n      const children = typeof schema.getTree === 'function' ? schema.getTree() : getObjectType_1.getObjectType(schema, false).getTree();\n\n      if (children.type === 'array') {\n        throw new Error('2d arrays are currently not supported');\n      }\n\n      return {\n        type: 'array',\n        rules: getBaseRules_1.getBaseRules('array', isOptional).concat(rules),\n        each: {\n          '*': {\n            /**\n             * Nodes of array cannot be marked as required and hence `size`\n             * rule must be used on array for same\n             */\n            rules: children.rules.filter(({\n              name\n            }) => name !== 'required'),\n            children: children.type === 'object' ? children.children : {}\n          }\n        }\n      };\n    }\n\n  };\n}\n\nexports.getArrayType = getArrayType;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-parser/build/src/utils/getArrayType.js"],"names":["Object","defineProperty","exports","value","getBaseRules_1","require","getObjectType_1","getArrayType","schema","isOptional","rules","getTree","children","getObjectType","type","Error","getBaseRules","concat","each","filter","name"],"mappings":"AAAA;AACA;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,cAAc,GAAGC,OAAO,CAAC,gBAAD,CAA9B;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,iBAAD,CAA/B;AACA;;;;;AAGA,SAASE,YAAT,CAAsBC,MAAtB,EAA8BC,UAA9B,EAA0CC,KAA1C,EAAiD;AAC7C,SAAO;AACHC,IAAAA,OAAO,GAAG;AACN,YAAMC,QAAQ,GAAG,OAAQJ,MAAM,CAACG,OAAf,KAA4B,UAA5B,GACXH,MAAM,CAACG,OAAP,EADW,GAEXL,eAAe,CAACO,aAAhB,CAA8BL,MAA9B,EAAsC,KAAtC,EAA6CG,OAA7C,EAFN;;AAGA,UAAIC,QAAQ,CAACE,IAAT,KAAkB,OAAtB,EAA+B;AAC3B,cAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACH;;AACD,aAAO;AACHD,QAAAA,IAAI,EAAE,OADH;AAEHJ,QAAAA,KAAK,EAAEN,cAAc,CAACY,YAAf,CAA4B,OAA5B,EAAqCP,UAArC,EAAiDQ,MAAjD,CAAwDP,KAAxD,CAFJ;AAGHQ,QAAAA,IAAI,EAAE;AACF,eAAK;AACD;;;;AAIAR,YAAAA,KAAK,EAAEE,QAAQ,CAACF,KAAT,CAAeS,MAAf,CAAsB,CAAC;AAAEC,cAAAA;AAAF,aAAD,KAAcA,IAAI,KAAK,UAA7C,CALN;AAMDR,YAAAA,QAAQ,EAAEA,QAAQ,CAACE,IAAT,KAAkB,QAAlB,GAA6BF,QAAQ,CAACA,QAAtC,GAAiD;AAN1D;AADH;AAHH,OAAP;AAcH;;AAtBE,GAAP;AAwBH;;AACDV,OAAO,CAACK,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\n/*\n * indicative-parser\n *\n * (c) Harminder Virk <virk@adonisjs.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst getBaseRules_1 = require(\"./getBaseRules\");\nconst getObjectType_1 = require(\"./getObjectType\");\n/**\n * Returns runtime node for an array type.\n */\nfunction getArrayType(schema, isOptional, rules) {\n    return {\n        getTree() {\n            const children = typeof (schema.getTree) === 'function'\n                ? schema.getTree()\n                : getObjectType_1.getObjectType(schema, false).getTree();\n            if (children.type === 'array') {\n                throw new Error('2d arrays are currently not supported');\n            }\n            return {\n                type: 'array',\n                rules: getBaseRules_1.getBaseRules('array', isOptional).concat(rules),\n                each: {\n                    '*': {\n                        /**\n                         * Nodes of array cannot be marked as required and hence `size`\n                         * rule must be used on array for same\n                         */\n                        rules: children.rules.filter(({ name }) => name !== 'required'),\n                        children: children.type === 'object' ? children.children : {},\n                    },\n                },\n            };\n        },\n    };\n}\nexports.getArrayType = getArrayType;\n"]},"metadata":{},"sourceType":"script"}