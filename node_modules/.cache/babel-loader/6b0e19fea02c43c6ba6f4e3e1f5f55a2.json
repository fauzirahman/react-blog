{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst indicative_utils_1 = require(\"indicative-utils\");\n\nconst above_1 = require(\"../../raw/above\");\n\nconst MISSING_VALUE = 'above:make sure to define minValue';\nconst INVALID_TYPE = 'above:min value must be defined as an integer';\n/**\n * Enforces the field value to be above the defined value.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   age: 'number|above:20'\n * }\n *\n * // or\n * const rules = {\n *   age: [\n *     validations.number(),\n *     validations.above([20])\n *   ]\n * }\n * ```\n */\n\nconst validation = {\n  async: false,\n\n  compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n    const minValue = indicative_utils_1.cast(args[0], 'integer', INVALID_TYPE);\n    return [minValue];\n  },\n\n  validate: (data, field, [minValue], config) => {\n    const fieldValue = indicative_utils_1.getValue(data, field);\n    return indicative_utils_1.skippable(fieldValue, field, config) || above_1.above(fieldValue, minValue);\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-rules/build/src/validations/number/above.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","above_1","MISSING_VALUE","INVALID_TYPE","validation","async","compile","args","ensureLength","minValue","cast","validate","data","field","config","fieldValue","getValue","skippable","above","default"],"mappings":"AAAA;AACA;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAME,aAAa,GAAG,oCAAtB;AACA,MAAMC,YAAY,GAAG,+CAArB;AACA;;;;;;;;;;;;;;;;;;;;AAmBA,MAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;;AAEfC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACVR,IAAAA,kBAAkB,CAACS,YAAnB,CAAgCD,IAAhC,EAAsCL,aAAtC,EAAqD,CAArD;AACA,UAAMO,QAAQ,GAAGV,kBAAkB,CAACW,IAAnB,CAAwBH,IAAI,CAAC,CAAD,CAA5B,EAAiC,SAAjC,EAA4CJ,YAA5C,CAAjB;AACA,WAAO,CAACM,QAAD,CAAP;AACH,GANc;;AAOfE,EAAAA,QAAQ,EAAE,CAACC,IAAD,EAAOC,KAAP,EAAc,CAACJ,QAAD,CAAd,EAA0BK,MAA1B,KAAqC;AAC3C,UAAMC,UAAU,GAAGhB,kBAAkB,CAACiB,QAAnB,CAA4BJ,IAA5B,EAAkCC,KAAlC,CAAnB;AACA,WAAOd,kBAAkB,CAACkB,SAAnB,CAA6BF,UAA7B,EAAyCF,KAAzC,EAAgDC,MAAhD,KAA2Db,OAAO,CAACiB,KAAR,CAAcH,UAAd,EAA0BN,QAA1B,CAAlE;AACH;AAVc,CAAnB;AAYAZ,OAAO,CAACsB,OAAR,GAAkBf,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst above_1 = require(\"../../raw/above\");\nconst MISSING_VALUE = 'above:make sure to define minValue';\nconst INVALID_TYPE = 'above:min value must be defined as an integer';\n/**\n * Enforces the field value to be above the defined value.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   age: 'number|above:20'\n * }\n *\n * // or\n * const rules = {\n *   age: [\n *     validations.number(),\n *     validations.above([20])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n        const minValue = indicative_utils_1.cast(args[0], 'integer', INVALID_TYPE);\n        return [minValue];\n    },\n    validate: (data, field, [minValue], config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        return indicative_utils_1.skippable(fieldValue, field, config) || above_1.above(fieldValue, minValue);\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}