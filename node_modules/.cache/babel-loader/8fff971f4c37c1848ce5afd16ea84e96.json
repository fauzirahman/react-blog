{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nvar _slicedToArray = require(\"/opt/lampp/htdocs/blog-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar indicative_utils_1 = require(\"indicative-utils\");\n\nvar existy_1 = require(\"../../raw/existy\");\n\nvar MISSING_VALUE = 'same:make sure to define target field for comparison';\n/**\n * Enforces the field value to be same as the targeted field\n * value.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   password_confirmation: 'same:password'\n * }\n *\n * // or\n * const rules = {\n *   password_confirmation: [\n *     validations.same(['password'])\n *   ]\n * }\n * ```\n */\n\nvar validation = {\n  async: false,\n  compile: function compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n    return [String(args[0])];\n  },\n  validate: function validate(data, field, _ref, config) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        targetField = _ref2[0];\n\n    var fieldValue = indicative_utils_1.getValue(data, field);\n\n    if (indicative_utils_1.skippable(fieldValue, field, config)) {\n      return true;\n    }\n\n    var targetedFieldValue = indicative_utils_1.getValue(data, targetField);\n    return !existy_1.existy(targetedFieldValue) || targetedFieldValue === fieldValue;\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-rules/build/src/validations/primitives/same.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","existy_1","MISSING_VALUE","validation","async","compile","args","ensureLength","String","validate","data","field","config","targetField","fieldValue","getValue","skippable","targetedFieldValue","existy","default"],"mappings":"AAAA;AACA;;;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,kBAAD,CAAxB;;AACA,IAAME,aAAa,GAAG,sDAAtB;AACA;;;;;;;;;;;;;;;;;;;;AAmBA,IAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;AAEfC,EAAAA,OAFe,mBAEPC,IAFO,EAED;AACVP,IAAAA,kBAAkB,CAACQ,YAAnB,CAAgCD,IAAhC,EAAsCJ,aAAtC,EAAqD,CAArD;AACA,WAAO,CAACM,MAAM,CAACF,IAAI,CAAC,CAAD,CAAL,CAAP,CAAP;AACH,GALc;AAMfG,EAAAA,QAAQ,EAAE,kBAACC,IAAD,EAAOC,KAAP,QAA6BC,MAA7B,EAAwC;AAAA;AAAA,QAAzBC,WAAyB;;AAC9C,QAAMC,UAAU,GAAGf,kBAAkB,CAACgB,QAAnB,CAA4BL,IAA5B,EAAkCC,KAAlC,CAAnB;;AACA,QAAIZ,kBAAkB,CAACiB,SAAnB,CAA6BF,UAA7B,EAAyCH,KAAzC,EAAgDC,MAAhD,CAAJ,EAA6D;AACzD,aAAO,IAAP;AACH;;AACD,QAAMK,kBAAkB,GAAGlB,kBAAkB,CAACgB,QAAnB,CAA4BL,IAA5B,EAAkCG,WAAlC,CAA3B;AACA,WAAO,CAACZ,QAAQ,CAACiB,MAAT,CAAgBD,kBAAhB,CAAD,IAAwCA,kBAAkB,KAAKH,UAAtE;AACH;AAbc,CAAnB;AAeAjB,OAAO,CAACsB,OAAR,GAAkBhB,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst existy_1 = require(\"../../raw/existy\");\nconst MISSING_VALUE = 'same:make sure to define target field for comparison';\n/**\n * Enforces the field value to be same as the targeted field\n * value.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   password_confirmation: 'same:password'\n * }\n *\n * // or\n * const rules = {\n *   password_confirmation: [\n *     validations.same(['password'])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n        return [String(args[0])];\n    },\n    validate: (data, field, [targetField], config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        if (indicative_utils_1.skippable(fieldValue, field, config)) {\n            return true;\n        }\n        const targetedFieldValue = indicative_utils_1.getValue(data, targetField);\n        return !existy_1.existy(targetedFieldValue) || targetedFieldValue === fieldValue;\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}