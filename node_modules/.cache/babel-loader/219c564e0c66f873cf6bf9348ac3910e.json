{"ast":null,"code":"\"use strict\";\n/**\n * @module indicative-rules\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nvar date_fns_1 = require(\"date-fns\");\n/**\n * Returns a boolean telling if value is valid as per the given date format\n * or not.\n *\n * @example\n * ```js\n * const { is } = require('indicative')\n *\n * if (is.dateFormat('2010-11-20', ['YYYY-MM-DD'])) {\n * }\n *\n * // You can also check against multiple format to see if it matches any\n * // one or not\n * if (is.dateFormat('2010-11-20', ['YYYY-MM-DD', 'YYYY/MM/DD'])) {\n * }\n * ```\n */\n\n\nexports.dateFormat = function (input, formats) {\n  return (Array.isArray(formats) ? formats : [formats]).some(function (pattern) {\n    var sanitizedInput = input;\n    var hasTimeZone = false; // Following https://www.w3.org/TR/NOTE-datetime\n\n    if (pattern.endsWith('ZZ')) {\n      sanitizedInput = input.replace(/(\\+|-)\\d{4}$/, '');\n      pattern = pattern.replace(/ZZ$/, '');\n      hasTimeZone = true;\n    } else if (pattern.endsWith('Z')) {\n      sanitizedInput = input.replace(/Z$/, '').replace(/(\\+|-)\\d{2}:\\d{2}$/, '');\n      pattern = pattern.replace(/Z$/, '');\n      hasTimeZone = true;\n    }\n\n    var formattedInput = date_fns_1.format(sanitizedInput, pattern);\n    /**\n     * Date is invalid\n     */\n\n    if (formattedInput === 'Invalid Date') {\n      return false;\n    }\n    /**\n     * When pattern and date doesn't have a timezone, then we ensure\n     * that formatted date as same as user input\n     */\n\n\n    if (!hasTimeZone) {\n      return formattedInput === input;\n    }\n    /**\n     * Otherwise formatted date must be same as `input - timezone` and\n     * `input - timezone` isn't same as `input`.\n     */\n\n\n    return formattedInput === sanitizedInput && sanitizedInput !== input;\n  });\n};","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative-rules/build/src/raw/dateFormat.js"],"names":["Object","defineProperty","exports","value","date_fns_1","require","dateFormat","input","formats","Array","isArray","some","pattern","sanitizedInput","hasTimeZone","endsWith","replace","formattedInput","format"],"mappings":"AAAA;AACA;;;;AAGAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;;;;;AAQA,IAAMC,UAAU,GAAGC,OAAO,CAAC,UAAD,CAA1B;AACA;;;;;;;;;;;;;;;;;;;AAiBAH,OAAO,CAACI,UAAR,GAAqB,UAACC,KAAD,EAAQC,OAAR,EAAoB;AACrC,SAAO,CAACC,KAAK,CAACC,OAAN,CAAcF,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CAApC,EAA+CG,IAA/C,CAAoD,UAAAC,OAAO,EAAI;AAClE,QAAIC,cAAc,GAAGN,KAArB;AACA,QAAIO,WAAW,GAAG,KAAlB,CAFkE,CAGlE;;AACA,QAAIF,OAAO,CAACG,QAAR,CAAiB,IAAjB,CAAJ,EAA4B;AACxBF,MAAAA,cAAc,GAAGN,KAAK,CAACS,OAAN,CAAc,cAAd,EAA8B,EAA9B,CAAjB;AACAJ,MAAAA,OAAO,GAAGA,OAAO,CAACI,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAV;AACAF,MAAAA,WAAW,GAAG,IAAd;AACH,KAJD,MAKK,IAAIF,OAAO,CAACG,QAAR,CAAiB,GAAjB,CAAJ,EAA2B;AAC5BF,MAAAA,cAAc,GAAGN,KAAK,CAACS,OAAN,CAAc,IAAd,EAAoB,EAApB,EAAwBA,OAAxB,CAAgC,oBAAhC,EAAsD,EAAtD,CAAjB;AACAJ,MAAAA,OAAO,GAAGA,OAAO,CAACI,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,CAAV;AACAF,MAAAA,WAAW,GAAG,IAAd;AACH;;AACD,QAAMG,cAAc,GAAGb,UAAU,CAACc,MAAX,CAAkBL,cAAlB,EAAkCD,OAAlC,CAAvB;AACA;;;;AAGA,QAAIK,cAAc,KAAK,cAAvB,EAAuC;AACnC,aAAO,KAAP;AACH;AACD;;;;;;AAIA,QAAI,CAACH,WAAL,EAAkB;AACd,aAAOG,cAAc,KAAKV,KAA1B;AACH;AACD;;;;;;AAIA,WAAOU,cAAc,KAAKJ,cAAnB,IAAqCA,cAAc,KAAKN,KAA/D;AACH,GAjCM,CAAP;AAkCH,CAnCD","sourcesContent":["\"use strict\";\n/**\n * @module indicative-rules\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nconst date_fns_1 = require(\"date-fns\");\n/**\n * Returns a boolean telling if value is valid as per the given date format\n * or not.\n *\n * @example\n * ```js\n * const { is } = require('indicative')\n *\n * if (is.dateFormat('2010-11-20', ['YYYY-MM-DD'])) {\n * }\n *\n * // You can also check against multiple format to see if it matches any\n * // one or not\n * if (is.dateFormat('2010-11-20', ['YYYY-MM-DD', 'YYYY/MM/DD'])) {\n * }\n * ```\n */\nexports.dateFormat = (input, formats) => {\n    return (Array.isArray(formats) ? formats : [formats]).some(pattern => {\n        let sanitizedInput = input;\n        let hasTimeZone = false;\n        // Following https://www.w3.org/TR/NOTE-datetime\n        if (pattern.endsWith('ZZ')) {\n            sanitizedInput = input.replace(/(\\+|-)\\d{4}$/, '');\n            pattern = pattern.replace(/ZZ$/, '');\n            hasTimeZone = true;\n        }\n        else if (pattern.endsWith('Z')) {\n            sanitizedInput = input.replace(/Z$/, '').replace(/(\\+|-)\\d{2}:\\d{2}$/, '');\n            pattern = pattern.replace(/Z$/, '');\n            hasTimeZone = true;\n        }\n        const formattedInput = date_fns_1.format(sanitizedInput, pattern);\n        /**\n         * Date is invalid\n         */\n        if (formattedInput === 'Invalid Date') {\n            return false;\n        }\n        /**\n         * When pattern and date doesn't have a timezone, then we ensure\n         * that formatted date as same as user input\n         */\n        if (!hasTimeZone) {\n            return formattedInput === input;\n        }\n        /**\n         * Otherwise formatted date must be same as `input - timezone` and\n         * `input - timezone` isn't same as `input`.\n         */\n        return formattedInput === sanitizedInput && sanitizedInput !== input;\n    });\n};\n"]},"metadata":{},"sourceType":"script"}