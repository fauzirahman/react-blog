{"ast":null,"code":"\"use strict\";\n/**\n * @module indicative\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n* indicative-compiler\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\n/**\n * In memory cache manager to cache pre-compiled schemas when `cacheKey`\n * is defined.\n */\n\nclass CacheManager {\n  constructor() {\n    this.cache = new Map();\n  }\n  /**\n   * Add to cache\n   */\n\n\n  set(key, value) {\n    this.cache.set(key, value);\n  }\n  /**\n   * Read from cache\n   */\n\n\n  get(key) {\n    return this.cache.get(key);\n  }\n\n}\n\nexports.CacheManager = CacheManager;","map":{"version":3,"sources":["/opt/lampp/htdocs/react-blog/node_modules/indicative/src/CacheManager.js"],"names":["Object","defineProperty","exports","value","CacheManager","constructor","cache","Map","set","key","get"],"mappings":"AAAA;AACA;;;;AAGAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;;;;;AAQA;;;;;AAIA,MAAMC,YAAN,CAAmB;AACfC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACH;AACD;;;;;AAGAC,EAAAA,GAAG,CAACC,GAAD,EAAMN,KAAN,EAAa;AACZ,SAAKG,KAAL,CAAWE,GAAX,CAAeC,GAAf,EAAoBN,KAApB;AACH;AACD;;;;;AAGAO,EAAAA,GAAG,CAACD,GAAD,EAAM;AACL,WAAO,KAAKH,KAAL,CAAWI,GAAX,CAAeD,GAAf,CAAP;AACH;;AAfc;;AAiBnBP,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\n/**\n * @module indicative\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n* indicative-compiler\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n/**\n * In memory cache manager to cache pre-compiled schemas when `cacheKey`\n * is defined.\n */\nclass CacheManager {\n    constructor() {\n        this.cache = new Map();\n    }\n    /**\n     * Add to cache\n     */\n    set(key, value) {\n        this.cache.set(key, value);\n    }\n    /**\n     * Read from cache\n     */\n    get(key) {\n        return this.cache.get(key);\n    }\n}\nexports.CacheManager = CacheManager;\n"]},"metadata":{},"sourceType":"script"}