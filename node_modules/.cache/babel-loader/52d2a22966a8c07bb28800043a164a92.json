{"ast":null,"code":"\"use strict\";\n/**\n * @module indicative-formatters\n */\n\nvar _classCallCheck = require(\"/opt/lampp/htdocs/blog-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/lampp/htdocs/blog-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Vanilla formatter is a plain formatter to collect validation\n * errors\n */\n\nvar VanillaFormatter =\n/*#__PURE__*/\nfunction () {\n  function VanillaFormatter() {\n    _classCallCheck(this, VanillaFormatter);\n\n    this.errors = [];\n  }\n  /**\n   * Adds error to the list of existing errors\n   */\n\n\n  _createClass(VanillaFormatter, [{\n    key: \"addError\",\n    value: function addError(error, field, rule) {\n      var message = '';\n      var validation = rule;\n\n      if (error instanceof Error) {\n        message = error.message;\n        validation = 'ENGINE_EXCEPTION';\n      } else {\n        message = error;\n      }\n\n      this.errors.push({\n        message: message,\n        validation: validation,\n        field: field\n      });\n    }\n    /**\n     * Returns an array of errors or `null` when there are no\n     * errors\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.errors.length ? this.errors : null;\n    }\n  }]);\n\n  return VanillaFormatter;\n}();\n\nexports.VanillaFormatter = VanillaFormatter;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-formatters/build/src/VanillaFormatter.js"],"names":["Object","defineProperty","exports","value","VanillaFormatter","errors","error","field","rule","message","validation","Error","push","length"],"mappings":"AAAA;AACA;;;;;;;;AAGAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;IAIMC,gB;;;AACF,8BAAc;AAAA;;AACV,SAAKC,MAAL,GAAc,EAAd;AACH;AACD;;;;;;;6BAGSC,K,EAAOC,K,EAAOC,I,EAAM;AACzB,UAAIC,OAAO,GAAG,EAAd;AACA,UAAIC,UAAU,GAAGF,IAAjB;;AACA,UAAIF,KAAK,YAAYK,KAArB,EAA4B;AACxBF,QAAAA,OAAO,GAAGH,KAAK,CAACG,OAAhB;AACAC,QAAAA,UAAU,GAAG,kBAAb;AACH,OAHD,MAIK;AACDD,QAAAA,OAAO,GAAGH,KAAV;AACH;;AACD,WAAKD,MAAL,CAAYO,IAAZ,CAAiB;AAAEH,QAAAA,OAAO,EAAPA,OAAF;AAAWC,QAAAA,UAAU,EAAVA,UAAX;AAAuBH,QAAAA,KAAK,EAALA;AAAvB,OAAjB;AACH;AACD;;;;;;;6BAIS;AACL,aAAO,KAAKF,MAAL,CAAYQ,MAAZ,GAAqB,KAAKR,MAA1B,GAAmC,IAA1C;AACH;;;;;;AAELH,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\n/**\n * @module indicative-formatters\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Vanilla formatter is a plain formatter to collect validation\n * errors\n */\nclass VanillaFormatter {\n    constructor() {\n        this.errors = [];\n    }\n    /**\n     * Adds error to the list of existing errors\n     */\n    addError(error, field, rule) {\n        let message = '';\n        let validation = rule;\n        if (error instanceof Error) {\n            message = error.message;\n            validation = 'ENGINE_EXCEPTION';\n        }\n        else {\n            message = error;\n        }\n        this.errors.push({ message, validation, field });\n    }\n    /**\n     * Returns an array of errors or `null` when there are no\n     * errors\n     */\n    toJSON() {\n        return this.errors.length ? this.errors : null;\n    }\n}\nexports.VanillaFormatter = VanillaFormatter;\n"]},"metadata":{},"sourceType":"script"}