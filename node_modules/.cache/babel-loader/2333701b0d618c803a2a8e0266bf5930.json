{"ast":null,"code":"\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst indicative_utils_1 = require(\"indicative-utils\");\n\nconst MISSING_VALUE = 'notEquals:make sure to define comparison value';\n/**\n * Enforces the field value not to be equal to the given value.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   username: 'not_equals:root'\n * }\n *\n * // or\n * const rules = {\n *   username: [\n *     validations.notEquals(['root'])\n *   ]\n * }\n * ```\n */\n\nconst validation = {\n  async: false,\n\n  compile(args) {\n    indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n    return [args[0]];\n  },\n\n  validate: (data, field, [comparisonValue], config) => {\n    const fieldValue = indicative_utils_1.getValue(data, field);\n    /* eslint eqeqeq: \"off\" */\n\n    return indicative_utils_1.skippable(fieldValue, field, config) || comparisonValue != fieldValue;\n  }\n};\nexports.default = validation;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-rules/build/src/validations/primitives/notEquals.js"],"names":["Object","defineProperty","exports","value","indicative_utils_1","require","MISSING_VALUE","validation","async","compile","args","ensureLength","validate","data","field","comparisonValue","config","fieldValue","getValue","skippable","default"],"mappings":"AAAA;AACA;;;;;;;;;AAQAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,MAAMC,aAAa,GAAG,gDAAtB;AACA;;;;;;;;;;;;;;;;;;;AAkBA,MAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE,KADQ;;AAEfC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACVN,IAAAA,kBAAkB,CAACO,YAAnB,CAAgCD,IAAhC,EAAsCJ,aAAtC,EAAqD,CAArD;AACA,WAAO,CAACI,IAAI,CAAC,CAAD,CAAL,CAAP;AACH,GALc;;AAMfE,EAAAA,QAAQ,EAAE,CAACC,IAAD,EAAOC,KAAP,EAAc,CAACC,eAAD,CAAd,EAAiCC,MAAjC,KAA4C;AAClD,UAAMC,UAAU,GAAGb,kBAAkB,CAACc,QAAnB,CAA4BL,IAA5B,EAAkCC,KAAlC,CAAnB;AACA;;AACA,WAAOV,kBAAkB,CAACe,SAAnB,CAA6BF,UAA7B,EAAyCH,KAAzC,EAAgDE,MAAhD,KAA2DD,eAAe,IAAIE,UAArF;AACH;AAVc,CAAnB;AAYAf,OAAO,CAACkB,OAAR,GAAkBb,UAAlB","sourcesContent":["\"use strict\";\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indicative_utils_1 = require(\"indicative-utils\");\nconst MISSING_VALUE = 'notEquals:make sure to define comparison value';\n/**\n * Enforces the field value not to be equal to the given value.\n *\n * ```ts\n * import { validations } from 'indicative/validator'\n *\n * const rules = {\n *   username: 'not_equals:root'\n * }\n *\n * // or\n * const rules = {\n *   username: [\n *     validations.notEquals(['root'])\n *   ]\n * }\n * ```\n */\nconst validation = {\n    async: false,\n    compile(args) {\n        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);\n        return [args[0]];\n    },\n    validate: (data, field, [comparisonValue], config) => {\n        const fieldValue = indicative_utils_1.getValue(data, field);\n        /* eslint eqeqeq: \"off\" */\n        return indicative_utils_1.skippable(fieldValue, field, config) || comparisonValue != fieldValue;\n    },\n};\nexports.default = validation;\n"]},"metadata":{},"sourceType":"script"}