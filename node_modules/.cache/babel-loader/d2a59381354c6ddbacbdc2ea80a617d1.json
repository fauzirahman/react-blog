{"ast":null,"code":"\"use strict\";\n/**\n * @module indicative-rules\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nconst striptags_1 = __importDefault(require(\"striptags\"));\n\nconst indicative_utils_1 = require(\"indicative-utils\");\n/**\n * Strips HTML tags from a string. If value is not a string, it will be returned\n * as it is.\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   message: 'strip_tags'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   message: [\n *     sanitizations.stripTags()\n *   ]\n * }\n * ```\n *\n * Also you can pass an array of whitelisted tags.\n *\n * ```js\n * const sanitizationRules = {\n *   message: 'strip_tags:a,img'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   message: [\n *     rule('strip_tags', ['a', 'img'])\n *   ]\n * }\n * ```\n */\n\n\nconst stripTags = {\n  sanitize(data, field, args = []) {\n    let fieldValue = indicative_utils_1.getValue(data, field);\n\n    if (typeof fieldValue !== 'string') {\n      return;\n    }\n\n    indicative_utils_1.patchValue(data, field, striptags_1.default(fieldValue, args));\n  }\n\n};\nexports.default = stripTags;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-rules/build/src/sanitizations/stripTags.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","striptags_1","require","indicative_utils_1","stripTags","sanitize","data","field","args","fieldValue","getValue","patchValue","default"],"mappings":"AAAA;AACA;;;;AAGA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;;;;;AAQA,MAAMC,WAAW,GAAGP,eAAe,CAACQ,OAAO,CAAC,WAAD,CAAR,CAAnC;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,kBAAD,CAAlC;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,MAAME,SAAS,GAAG;AACdC,EAAAA,QAAQ,CAACC,IAAD,EAAOC,KAAP,EAAcC,IAAI,GAAG,EAArB,EAAyB;AAC7B,QAAIC,UAAU,GAAGN,kBAAkB,CAACO,QAAnB,CAA4BJ,IAA5B,EAAkCC,KAAlC,CAAjB;;AACA,QAAI,OAAQE,UAAR,KAAwB,QAA5B,EAAsC;AAClC;AACH;;AACDN,IAAAA,kBAAkB,CAACQ,UAAnB,CAA8BL,IAA9B,EAAoCC,KAApC,EAA2CN,WAAW,CAACW,OAAZ,CAAoBH,UAApB,EAAgCD,IAAhC,CAA3C;AACH;;AAPa,CAAlB;AASAT,OAAO,CAACa,OAAR,GAAkBR,SAAlB","sourcesContent":["\"use strict\";\n/**\n * @module indicative-rules\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n* indicative-rules\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nconst striptags_1 = __importDefault(require(\"striptags\"));\nconst indicative_utils_1 = require(\"indicative-utils\");\n/**\n * Strips HTML tags from a string. If value is not a string, it will be returned\n * as it is.\n *\n * ```ts\n * import { sanitizations } from 'indicative/sanitizer'\n *\n * const sanitizationRules = {\n *   message: 'strip_tags'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   message: [\n *     sanitizations.stripTags()\n *   ]\n * }\n * ```\n *\n * Also you can pass an array of whitelisted tags.\n *\n * ```js\n * const sanitizationRules = {\n *   message: 'strip_tags:a,img'\n * }\n *\n * // or\n * const sanitizationRules = {\n *   message: [\n *     rule('strip_tags', ['a', 'img'])\n *   ]\n * }\n * ```\n */\nconst stripTags = {\n    sanitize(data, field, args = []) {\n        let fieldValue = indicative_utils_1.getValue(data, field);\n        if (typeof (fieldValue) !== 'string') {\n            return;\n        }\n        indicative_utils_1.patchValue(data, field, striptags_1.default(fieldValue, args));\n    },\n};\nexports.default = stripTags;\n"]},"metadata":{},"sourceType":"script"}