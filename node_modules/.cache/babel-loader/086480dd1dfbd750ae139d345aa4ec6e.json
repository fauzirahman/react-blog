{"ast":null,"code":"\"use strict\";\n/**\n * @module compiler/validator\n */\n\nvar _classCallCheck = require(\"/opt/lampp/htdocs/blog-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/lampp/htdocs/blog-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n* indicative-compiler\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\n\nvar indicative_parser_1 = require(\"indicative-parser\");\n\nvar TreeWalker_1 = require(\"../TreeWalker\");\n\nvar ArrayWrapper_1 = require(\"./ArrayWrapper\");\n\nvar ValidationsRunner_1 = require(\"./ValidationsRunner\");\n/**\n * Compiles rules and messages schema to an array of top level\n * functions highly optimized for speed.\n */\n\n\nvar Compiler =\n/*#__PURE__*/\nfunction () {\n  function Compiler(schema, messages, validations) {\n    _classCallCheck(this, Compiler);\n\n    this.validations = validations;\n    this.parsedSchema = indicative_parser_1.rulesParser(schema);\n    this.parsedMessages = indicative_parser_1.messagesParser(messages);\n  }\n  /**\n   * Compiles the schema to an array of functions\n   */\n\n\n  _createClass(Compiler, [{\n    key: \"compile\",\n    value: function compile() {\n      var _this = this;\n\n      return new TreeWalker_1.TreeWalker(\n      /**\n       * Consume each node inside the tree\n       */\n      function (field, type, rules, dotPath, pointer) {\n        var messages = _this.parsedMessages.fields[pointer] || {};\n        var genericMessage = _this.parsedMessages.rules;\n        return new ValidationsRunner_1.ValidationsRunner(field, type, dotPath, rules, _this.validations, messages, genericMessage);\n      },\n      /**\n       * Wraps array children, since the length of array is unknown.\n       */\n      function (index, field, children, dotPath) {\n        return new ArrayWrapper_1.ArrayWrapper(field, index, children, dotPath);\n      }).walk(this.parsedSchema);\n    }\n  }]);\n\n  return Compiler;\n}();\n\nexports.Compiler = Compiler;","map":{"version":3,"sources":["/opt/lampp/htdocs/blog-app/node_modules/indicative-compiler/build/src/Validator/Compiler.js"],"names":["Object","defineProperty","exports","value","indicative_parser_1","require","TreeWalker_1","ArrayWrapper_1","ValidationsRunner_1","Compiler","schema","messages","validations","parsedSchema","rulesParser","parsedMessages","messagesParser","TreeWalker","field","type","rules","dotPath","pointer","fields","genericMessage","ValidationsRunner","index","children","ArrayWrapper","walk"],"mappings":"AAAA;AACA;;;;;;;;AAGAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;;;;;AAQA,IAAMC,mBAAmB,GAAGC,OAAO,CAAC,mBAAD,CAAnC;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA5B;;AACA,IAAME,cAAc,GAAGF,OAAO,CAAC,gBAAD,CAA9B;;AACA,IAAMG,mBAAmB,GAAGH,OAAO,CAAC,qBAAD,CAAnC;AACA;;;;;;IAIMI,Q;;;AACF,oBAAYC,MAAZ,EAAoBC,QAApB,EAA8BC,WAA9B,EAA2C;AAAA;;AACvC,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKC,YAAL,GAAoBT,mBAAmB,CAACU,WAApB,CAAgCJ,MAAhC,CAApB;AACA,SAAKK,cAAL,GAAsBX,mBAAmB,CAACY,cAApB,CAAmCL,QAAnC,CAAtB;AACH;AACD;;;;;;;8BAGU;AAAA;;AACN,aAAO,IAAIL,YAAY,CAACW,UAAjB;AACP;;;AAGA,gBAACC,KAAD,EAAQC,IAAR,EAAcC,KAAd,EAAqBC,OAArB,EAA8BC,OAA9B,EAA0C;AACtC,YAAMX,QAAQ,GAAG,KAAI,CAACI,cAAL,CAAoBQ,MAApB,CAA2BD,OAA3B,KAAuC,EAAxD;AACA,YAAME,cAAc,GAAG,KAAI,CAACT,cAAL,CAAoBK,KAA3C;AACA,eAAO,IAAIZ,mBAAmB,CAACiB,iBAAxB,CAA0CP,KAA1C,EAAiDC,IAAjD,EAAuDE,OAAvD,EAAgED,KAAhE,EAAuE,KAAI,CAACR,WAA5E,EAAyFD,QAAzF,EAAmGa,cAAnG,CAAP;AACH,OARM;AASP;;;AAGA,gBAACE,KAAD,EAAQR,KAAR,EAAeS,QAAf,EAAyBN,OAAzB,EAAqC;AACjC,eAAO,IAAId,cAAc,CAACqB,YAAnB,CAAgCV,KAAhC,EAAuCQ,KAAvC,EAA8CC,QAA9C,EAAwDN,OAAxD,CAAP;AACH,OAdM,EAcJQ,IAdI,CAcC,KAAKhB,YAdN,CAAP;AAeH;;;;;;AAELX,OAAO,CAACO,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\n/**\n * @module compiler/validator\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n* indicative-compiler\n*\n* (c) Harminder Virk <virk@adonisjs.com>\n*\n* For the full copyright and license information, please view the LICENSE\n* file that was distributed with this source code.\n*/\nconst indicative_parser_1 = require(\"indicative-parser\");\nconst TreeWalker_1 = require(\"../TreeWalker\");\nconst ArrayWrapper_1 = require(\"./ArrayWrapper\");\nconst ValidationsRunner_1 = require(\"./ValidationsRunner\");\n/**\n * Compiles rules and messages schema to an array of top level\n * functions highly optimized for speed.\n */\nclass Compiler {\n    constructor(schema, messages, validations) {\n        this.validations = validations;\n        this.parsedSchema = indicative_parser_1.rulesParser(schema);\n        this.parsedMessages = indicative_parser_1.messagesParser(messages);\n    }\n    /**\n     * Compiles the schema to an array of functions\n     */\n    compile() {\n        return new TreeWalker_1.TreeWalker(\n        /**\n         * Consume each node inside the tree\n         */\n        (field, type, rules, dotPath, pointer) => {\n            const messages = this.parsedMessages.fields[pointer] || {};\n            const genericMessage = this.parsedMessages.rules;\n            return new ValidationsRunner_1.ValidationsRunner(field, type, dotPath, rules, this.validations, messages, genericMessage);\n        }, \n        /**\n         * Wraps array children, since the length of array is unknown.\n         */\n        (index, field, children, dotPath) => {\n            return new ArrayWrapper_1.ArrayWrapper(field, index, children, dotPath);\n        }).walk(this.parsedSchema);\n    }\n}\nexports.Compiler = Compiler;\n"]},"metadata":{},"sourceType":"script"}